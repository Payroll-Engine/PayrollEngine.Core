<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PayrollEngine.Core</name>
    </assembly>
    <members>
        <member name="T:PayrollEngine.ActionSource">
            <summary>The action source</summary>
        </member>
        <member name="F:PayrollEngine.ActionSource.Script">
            <summary>Script</summary>
        </member>
        <member name="F:PayrollEngine.ActionSource.System">
            <summary>System</summary>
        </member>
        <member name="T:PayrollEngine.AssemblyExtensions">
            <summary>Helper to access code from an embedded script resources</summary>
        </member>
        <member name="M:PayrollEngine.AssemblyExtensions.GetEmbeddedFile(System.Reflection.Assembly,System.String)">
            <summary>Get code from embedded resource file</summary>
            <param name="assembly">The assembly</param>
            <param name="resourceName">The code resource name</param>
            <returns>The resource code</returns>
        </member>
        <member name="M:PayrollEngine.AssemblyExtensions.GetEmbeddedFiles(System.Reflection.Assembly)">
            <summary>Get all code from embedded resource files</summary>
            <param name="assembly">The assembly</param>
            <returns>The resource codes</returns>
        </member>
        <member name="M:PayrollEngine.AssemblyExtensions.GetEmbeddedFiles(System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Get the code from multiple embedded resources</summary>
            <param name="assembly">The assembly</param>
            <param name="resourceNames">The code resource names</param>
            <returns>The resource codes</returns>
        </member>
        <member name="T:PayrollEngine.AttributeObjectExtensions">
            <summary><see cref="T:PayrollEngine.IAttributeObject" /> extension methods</summary>
        </member>
        <member name="M:PayrollEngine.AttributeObjectExtensions.ContainsAttribute(PayrollEngine.IAttributeObject,System.String)">
            <summary>Test attribute</summary>
            <param name="attributeObject">The attribute object</param>
            <param name="key">The value key</param>
            <returns>True if attribute is available</returns>
        </member>
        <member name="M:PayrollEngine.AttributeObjectExtensions.GetAttribute(PayrollEngine.IAttributeObject,System.String,System.Object)">
            <summary>Get attribute value</summary>
            <param name="attributeObject">The attribute object</param>
            <param name="key">The value key</param>
            <param name="defaultValue">The default value</param>
            <returns>The dictionary value</returns>
        </member>
        <member name="M:PayrollEngine.AttributeObjectExtensions.GetAttribute``1(PayrollEngine.IAttributeObject,System.String,``0)">
            <summary>Get attribute value</summary>
            <param name="attributeObject">The attribute object</param>
            <param name="key">The value key</param>
            <param name="defaultValue">The default value</param>
            <returns>The dictionary value</returns>
        </member>
        <member name="M:PayrollEngine.AttributeObjectExtensions.RemoveAttribute(PayrollEngine.IAttributeObject,System.String)">
            <summary>Remove attribute</summary>
            <param name="attributeObject">The attribute object</param>
            <param name="key">The value key</param>
        </member>
        <member name="M:PayrollEngine.AttributeObjectExtensions.SetAttribute(PayrollEngine.IAttributeObject,System.String,System.Object)">
            <summary>Set attribute value</summary>
            <param name="attributeObject">The attribute object</param>
            <param name="key">The value key</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:PayrollEngine.AttributeObjectExtensions.SetAttribute``1(PayrollEngine.IAttributeObject,System.String,``0)">
            <summary>Set attribute value</summary>
            <param name="attributeObject">The attribute object</param>
            <param name="key">The value key</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:PayrollEngine.AttributeObjectExtensions.GetAttributeGuid(PayrollEngine.IAttributeObject,System.String)">
            <summary>Get attribute <see cref="T:System.Guid"/> value</summary>
            <param name="attributeObject">The attribute object</param>
            <param name="key">The value key</param>
            <returns>The dictionary value, <see cref="F:System.Guid.Empty"/> on missing attribute</returns>
        </member>
        <member name="M:PayrollEngine.AttributeObjectExtensions.SetAttributeGuid(PayrollEngine.IAttributeObject,System.String,System.Guid)">
            <summary>Set attribute <see cref="T:System.Guid"/> value</summary>
            <param name="attributeObject">The attribute object</param>
            <param name="key">The value key</param>
            <param name="value">The Guid value to set</param>
        </member>
        <member name="T:PayrollEngine.AttributesExtensions">
            <summary>
            Attribute dictionary extension methods
            </summary>
        </member>
        <member name="M:PayrollEngine.AttributesExtensions.HasAttribute(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Nullable{PayrollEngine.Language})">
            <summary>
            Test for attribute
            </summary>
            <param name="attributes">The attributes dictionary</param>
            <param name="name">The attribute name</param>
            <param name="language">The attribute language</param>
            <returns>True if attribute exists</returns>
        </member>
        <member name="M:PayrollEngine.AttributesExtensions.GetMemberAttributeValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},``0,System.Nullable{PayrollEngine.Language},System.String)">
            <summary>
            Get member value
            </summary>
            <param name="attributes">The attributes dictionary</param>
            <param name="defaultValue">The default value</param>
            <param name="language">The attribute language</param>
            <param name="memberName">The member name</param>
            <returns>The member value</returns>
        </member>
        <member name="M:PayrollEngine.AttributesExtensions.GetAttributeValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0,System.Nullable{PayrollEngine.Language})">
            <summary>
            Get attribute value
            </summary>
            <param name="attributes">The attributes dictionary</param>
            <param name="name">The attribute name</param>
            <param name="defaultValue">The default value</param>
            <param name="language">The attribute language</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:PayrollEngine.AttributesExtensions.TryGetAttributeValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@,System.Nullable{PayrollEngine.Language})">
            <summary>
            Try to get an attribute value
            </summary>
            <param name="attributes">The attributes dictionary</param>
            <param name="name">The attribute name</param>
            <param name="value">The attribute value</param>
            <param name="language">The attribute language</param>
            <returns>True for an existing attribute</returns>
        </member>
        <member name="M:PayrollEngine.AttributesExtensions.GetStringAttributeValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Nullable{PayrollEngine.Language})">
            <summary>
            Get a string attribute value
            </summary>
            <param name="attributes">The attributes dictionary</param>
            <param name="name">The attribute name</param>
            <param name="language">The attribute language</param>
            <returns>The string value</returns>
        </member>
        <member name="M:PayrollEngine.AttributesExtensions.GetDateTimeAttributeValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Nullable{PayrollEngine.Language},System.Globalization.CultureInfo)">
            <summary>
            Get a date attribute value
            </summary>
            <param name="attributes">The attributes dictionary</param>
            <param name="name">The attribute name</param>
            <param name="language">The attribute language</param>
            <param name="culture">The attribute culture</param>
            <returns>The date value</returns>
        </member>
        <member name="M:PayrollEngine.AttributesExtensions.GetBooleanAttributeValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Nullable{PayrollEngine.Language})">
            <summary>
            Get a boolean attribute value
            </summary>
            <param name="attributes">The attributes dictionary</param>
            <param name="name">The attribute name</param>
            <param name="language">The attribute language</param>
            <returns>The boolean value</returns>
        </member>
        <member name="M:PayrollEngine.AttributesExtensions.GetIntegerAttributeValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Nullable{PayrollEngine.Language})">
            <summary>
            Get a integer attribute value
            </summary>
            <param name="attributes">The attributes dictionary</param>
            <param name="name">The attribute name</param>
            <param name="language">The attribute language</param>
            <returns>The integer value</returns>
        </member>
        <member name="M:PayrollEngine.AttributesExtensions.GetDecimalAttributeValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Nullable{PayrollEngine.Language})">
            <summary>
            Get a decimal attribute value
            </summary>
            <param name="attributes">The attributes dictionary</param>
            <param name="name">The attribute name</param>
            <param name="language">The attribute language</param>
            <returns>The decimal value</returns>
        </member>
        <member name="M:PayrollEngine.AttributesExtensions.GetEnumAttributeValue``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Nullable{PayrollEngine.Language})">
            <summary>
            Get an enum attribute value
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="attributes">Attribute dictionary</param>
            <param name="name">Name of attribute to extract enum from</param>
            <param name="language">The attribute language</param>
            <returns>Enum representation of string input</returns>
        </member>
        <member name="M:PayrollEngine.AttributesExtensions.SetMemberAttributeValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},``0,System.Nullable{PayrollEngine.Language},System.String)">
            <summary>
            Set member value
            </summary>
            <param name="attributes">The attributes dictionary</param>
            <param name="value">The value</param>
            <param name="language">The attribute language</param>
            <param name="memberName">The member name</param>
            <returns>The member value</returns>
        </member>
        <member name="M:PayrollEngine.AttributesExtensions.SetAttributeValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0,System.Nullable{PayrollEngine.Language})">
            <summary>
            Set an attribute value
            </summary>
            <param name="attributes">The attributes dictionary</param>
            <param name="name">The attribute name</param>
            <param name="value">The value</param>
            <param name="language">The attribute language</param>
        </member>
        <member name="M:PayrollEngine.AttributesExtensions.GetAttributeKey(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Nullable{PayrollEngine.Language})">
            <summary>
            Get attribute key
            </summary>
            <param name="attributes">The attributes dictionary</param>
            <param name="name">The attribute name</param>
            <param name="language">The attribute language</param>
            <returns>The attribute key</returns>
        </member>
        <member name="T:PayrollEngine.CacheRatio">
            <exclude />
            <summary>Calculates and logs the cache ratio</summary>
        </member>
        <member name="P:PayrollEngine.CacheRatio.Name">
            <summary>The cache ratio name</summary>
        </member>
        <member name="P:PayrollEngine.CacheRatio.LogLevel">
            <summary>The logger level</summary>
        </member>
        <member name="P:PayrollEngine.CacheRatio.HitCount">
            <summary>Hit count</summary>
        </member>
        <member name="P:PayrollEngine.CacheRatio.MissedCount">
            <summary>Missed count</summary>
        </member>
        <member name="P:PayrollEngine.CacheRatio.HitRatio">
            <summary>Calculate the cache hit ratio.
            See https://wp-rocket.me/blog/calculate-hit-and-miss-ratios/
            </summary>
            <returns>The cache hit ratio</returns>
        </member>
        <member name="M:PayrollEngine.CacheRatio.#ctor(System.String,PayrollEngine.LogLevel)">
            <summary>A new stopwatch</summary>
        </member>
        <member name="M:PayrollEngine.CacheRatio.UpdateWithLog(System.Boolean)">
            <summary>Updates and logs the cache ratio</summary>
            <param name="cached">The cache state</param>
        </member>
        <member name="T:PayrollEngine.CalendarTimeMap">
            <summary>The calendar time map</summary>
        </member>
        <member name="F:PayrollEngine.CalendarTimeMap.Period">
            <summary>Period</summary>
        </member>
        <member name="F:PayrollEngine.CalendarTimeMap.Cycle">
            <summary>Cycle</summary>
        </member>
        <member name="T:PayrollEngine.CalendarTimeUnit">
            <summary>The calendar time unit</summary>
            <remarks>The enum value is used as year divisor
            see also https://docs.oracle.com/cd/A60725_05/html/comnls/us/per/pylgp02.htm</remarks>
        </member>
        <member name="F:PayrollEngine.CalendarTimeUnit.Year">
            <summary>Year</summary>
        </member>
        <member name="F:PayrollEngine.CalendarTimeUnit.SemiYear">
            <summary>Semi year</summary>
        </member>
        <member name="F:PayrollEngine.CalendarTimeUnit.Quarter">
            <summary>Quarter</summary>
        </member>
        <member name="F:PayrollEngine.CalendarTimeUnit.BiMonth">
            <summary>Bi month</summary>
        </member>
        <member name="F:PayrollEngine.CalendarTimeUnit.CalendarMonth">
            <summary>Calendar month</summary>
        </member>
        <member name="F:PayrollEngine.CalendarTimeUnit.LunisolarMonth">
            <summary>Lunisolar month</summary>
        </member>
        <member name="F:PayrollEngine.CalendarTimeUnit.SemiMonth">
            <summary>Semi month</summary>
        </member>
        <member name="F:PayrollEngine.CalendarTimeUnit.BiWeek">
            <summary>Bi week</summary>
        </member>
        <member name="F:PayrollEngine.CalendarTimeUnit.Week">
            <summary>Week</summary>
        </member>
        <member name="T:PayrollEngine.CalendarTimeUnitExtensions">
            <summary>Extensions for <see cref="T:PayrollEngine.CalendarTimeUnit"/></summary>
        </member>
        <member name="M:PayrollEngine.CalendarTimeUnitExtensions.IsValidTimeUnit(PayrollEngine.CalendarTimeUnit,PayrollEngine.CalendarTimeUnit)">
            <summary>Test for valid time unit combination</summary>
            <param name="cycleUnit">The payroll cycle unit</param>
            <param name="periodUnit">The payroll period unit</param>
            <returns>True for a valid cycle/period combination</returns>
        </member>
        <member name="T:PayrollEngine.CalendarWeekMode">
            <summary>The calendar week mode</summary>
        </member>
        <member name="F:PayrollEngine.CalendarWeekMode.Week">
            <summary>Use the days of the entire week</summary>
        </member>
        <member name="F:PayrollEngine.CalendarWeekMode.WorkWeek">
            <summary>Use the working days from the payroll calendar</summary>
        </member>
        <member name="T:PayrollEngine.CalendarWeekRule">
            <summary>Defines different rules for determining the first week of the year</summary>
        </member>
        <member name="F:PayrollEngine.CalendarWeekRule.FirstDay">
            <summary>Indicates that the first week of the year starts on the first day of the year and
            ends before the following designated first day of the week. The value is 0</summary>
        </member>
        <member name="F:PayrollEngine.CalendarWeekRule.FirstFullWeek">
            <summary>Indicates that the first week of the year begins on the first occurrence of the
            designated first day of the week on or after the first day of the year. The value is 1</summary>
        </member>
        <member name="F:PayrollEngine.CalendarWeekRule.FirstFourDayWeek">
            <summary>Indicates that the first week of the year is the first week with four or more days
            before the designated first day of the week. The value is 2</summary>
        </member>
        <member name="T:PayrollEngine.CaseCancellationType">
            <summary>The cancellation type of a case</summary>
        </member>
        <member name="F:PayrollEngine.CaseCancellationType.None">
            <summary>No cancellation support</summary>
        </member>
        <member name="F:PayrollEngine.CaseCancellationType.Case">
            <summary>Cancellation by case</summary>
        </member>
        <member name="T:PayrollEngine.CaseFieldAggregationType">
            <summary>Aggregation type for a period case field <see cref="F:PayrollEngine.CaseFieldTimeType.Period"/></summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldAggregationType.Summary">
            <summary>Summary of period values</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldAggregationType.Last">
            <summary>The last period value</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldAggregationType.First">
            <summary>The first period value</summary>
        </member>
        <member name="T:PayrollEngine.CaseFieldCancellationMode">
            <summary>The cancellation mode for a regulation case field</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldCancellationMode.TimeType">
            <summary>Cancel by value time type: moment is invert, all others are previous</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldCancellationMode.Previous">
            <summary>Previous value, reset if no previous value is available</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldCancellationMode.Keep">
            <summary>Keep existing value</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldCancellationMode.Reset">
            <summary>Reset to default value, numbers=zero, boolean=false</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldCancellationMode.Invert">
            <summary>Invert value, numbers=value * -1, boolean=switch value</summary>
        </member>
        <member name="T:PayrollEngine.CaseFieldDateType">
            <summary>The case field date type</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.Day">
            <summary>Day</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.Sunday">
            <summary>Indicates Sunday</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.Monday">
            <summary>Indicates Monday</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.Tuesday">
            <summary>Indicates Tuesday</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.Wednesday">
            <summary>Indicates Wednesday</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.Thursday">
            <summary>Indicates Thursday</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.Friday">
            <summary>Indicates Friday</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.Saturday">
            <summary>Indicates Saturday</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.Month">
            <summary>Month</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.January">
            <summary>Indicates January</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.February">
            <summary>Indicates February</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.March">
            <summary>Indicates March</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.April">
            <summary>Indicates April</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.May">
            <summary>Indicates May</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.June">
            <summary>Indicates June</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.July">
            <summary>Indicates July</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.August">
            <summary>Indicates August</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.September">
            <summary>Indicates September</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.October">
            <summary>Indicates October</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.November">
            <summary>Indicates November</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.December">
            <summary>Indicates December</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldDateType.Year">
            <summary>Year</summary>
        </member>
        <member name="T:PayrollEngine.CaseFieldDateTypeExtensions">
            <summary>Extensions for <see cref="T:PayrollEngine.CaseFieldDateType"/></summary>
        </member>
        <member name="M:PayrollEngine.CaseFieldDateTypeExtensions.IsStartMatching(PayrollEngine.CaseFieldDateType,System.DateTime)">
            <summary>Test if a start date matches the case field date type</summary>
            <param name="dateType">The case field date type</param>
            <param name="value">The value to test</param>
            <returns>Tru if the start date matches the case field date type</returns>
        </member>
        <member name="M:PayrollEngine.CaseFieldDateTypeExtensions.IsEndMatching(PayrollEngine.CaseFieldDateType,System.DateTime)">
            <summary>Test if a end date matches the case field date type</summary>
            <param name="dateType">The case field date type</param>
            <param name="value">The value to test</param>
            <returns>Tru if the end date matches the case field date type</returns>
        </member>
        <member name="T:PayrollEngine.CaseFieldTimeType">
            <summary>The time period type for a regulation case field</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldTimeType.Timeless">
            <summary>Value without any time restriction (e.g. precautionary duty)</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldTimeType.Moment">
            <summary>Value applies to a specific time moment (e.g. bonus)</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldTimeType.Period">
            <summary>Value within a time period (e.g. working hours)</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldTimeType.CalendarPeriod">
            <summary>Value within a time period, mapped to the payroll calendar (e.g. monthly wage)</summary>
        </member>
        <member name="T:PayrollEngine.CaseFieldTimeUnit">
            <summary>The date type for a regulation case field</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldTimeUnit.Day">
            <summary>Date is representing a day</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldTimeUnit.HalfDay">
            <summary>Dates is representing a half day</summary>
        </member>
        <member name="F:PayrollEngine.CaseFieldTimeUnit.Month">
            <summary>Dates is representing a month</summary>
        </member>
        <member name="T:PayrollEngine.CaseIssueType">
            <summary>The type of a case issue</summary>
        </member>
        <member name="F:PayrollEngine.CaseIssueType.Unknown">
            <summary>Unknown issue</summary>
        </member>
        <member name="F:PayrollEngine.CaseIssueType.CaseInvalid">
            <summary>Case validation failed</summary>
        </member>
        <member name="F:PayrollEngine.CaseIssueType.CaseUnknown">
            <summary>Unknown case</summary>
        </member>
        <member name="F:PayrollEngine.CaseIssueType.CaseRelationInvalid">
            <summary>Case relation validation failed</summary>
        </member>
        <member name="F:PayrollEngine.CaseIssueType.CaseFieldDuplicated">
            <summary>Duplicated case field</summary>
        </member>
        <member name="F:PayrollEngine.CaseIssueType.CaseValueIncomplete">
            <summary>Incomplete case value</summary>
        </member>
        <member name="F:PayrollEngine.CaseIssueType.CaseValueMissing">
            <summary>Missing case value</summary>
        </member>
        <member name="F:PayrollEngine.CaseIssueType.CaseValueStartInvalid">
            <summary>Invalid case value start date</summary>
        </member>
        <member name="F:PayrollEngine.CaseIssueType.CaseValueEndInvalid">
            <summary>Invalid case value end date</summary>
        </member>
        <member name="F:PayrollEngine.CaseIssueType.CaseValueEndMissing">
            <summary>Missing case value end date</summary>
        </member>
        <member name="F:PayrollEngine.CaseIssueType.CaseValueWeekdayInvalid">
            <summary>Invalid weekday (0..6)</summary>
        </member>
        <member name="F:PayrollEngine.CaseIssueType.CaseValueMonthInvalid">
            <summary>Invalid month (0..11)</summary>
        </member>
        <member name="T:PayrollEngine.CaseType">
            <summary>The type of a case</summary>
        </member>
        <member name="F:PayrollEngine.CaseType.Global">
            <summary>Global case</summary>
        </member>
        <member name="F:PayrollEngine.CaseType.National">
            <summary>National case</summary>
        </member>
        <member name="F:PayrollEngine.CaseType.Company">
            <summary>Company case</summary>
        </member>
        <member name="F:PayrollEngine.CaseType.Employee">
            <summary>Employee case</summary>
        </member>
        <member name="T:PayrollEngine.CaseValueCreationMode">
            <summary>The case value creation mode</summary>
        </member>
        <member name="F:PayrollEngine.CaseValueCreationMode.OnChanges">
            <summary>Update on changes of the case value start, end or value</summary>
        </member>
        <member name="F:PayrollEngine.CaseValueCreationMode.Always">
            <summary>Create value always</summary>
        </member>
        <member name="F:PayrollEngine.CaseValueCreationMode.Discard">
            <summary>Discard value</summary>
        </member>
        <member name="T:PayrollEngine.CaseValueReference">
            <summary>
            Reference to case value
            </summary>
        </member>
        <member name="F:PayrollEngine.CaseValueReference.CaseFieldSlotSeparator">
            <summary>The case field slot separator</summary>
        </member>
        <member name="P:PayrollEngine.CaseValueReference.Reference">
            <summary>The case field reference</summary>
        </member>
        <member name="P:PayrollEngine.CaseValueReference.CaseFieldName">
            <summary>The case field name</summary>
        </member>
        <member name="P:PayrollEngine.CaseValueReference.HasCaseSlot">
            <summary>Test if slot is present</summary>
        </member>
        <member name="P:PayrollEngine.CaseValueReference.CaseSlot">
            <summary>The case slot</summary>
        </member>
        <member name="M:PayrollEngine.CaseValueReference.#ctor(System.String)">
            <summary>New instance of <see cref="T:PayrollEngine.CaseValueReference"/></summary>
            <param name="reference">The case field reference</param>
        </member>
        <member name="M:PayrollEngine.CaseValueReference.#ctor(System.String,System.String)">
            <summary>New instance of <see cref="T:PayrollEngine.CaseValueReference"/></summary>
            <param name="caseFieldName">The case field name</param>
            <param name="caseSlot">The case slot</param>
        </member>
        <member name="M:PayrollEngine.CaseValueReference.ToReference(System.String,System.String)">
            <summary>Convert to case value reference</summary>
            <param name="caseFieldName">The case field name</param>
            <param name="caseSlot">The case slot</param>
            <returns>The case value reference</returns>
        </member>
        <member name="M:PayrollEngine.CaseValueReference.ToString">
            <summary>The case value reference</summary>
            <returns>The string representation</returns>
        </member>
        <member name="T:PayrollEngine.CaseValueTimeTypeExtensions">
            <summary>Extensions for <see cref="T:PayrollEngine.CaseFieldTimeType"/></summary>
        </member>
        <member name="M:PayrollEngine.CaseValueTimeTypeExtensions.IsCalendarPeriod(PayrollEngine.CaseFieldTimeType)">
            <summary>Test if time type is a calendar period</summary>
            <param name="timeType">The time type</param>
            <returns>True for time type is scalable</returns>
        </member>
        <member name="T:PayrollEngine.CharacterCase">
            <summary>The text character case type</summary>
        </member>
        <member name="F:PayrollEngine.CharacterCase.Keep">
            <summary>Keep existing state</summary>
        </member>
        <member name="F:PayrollEngine.CharacterCase.ToUpper">
            <summary>Change to upper character</summary>
        </member>
        <member name="F:PayrollEngine.CharacterCase.ToLower">
            <summary>Change to lower character</summary>
        </member>
        <member name="T:PayrollEngine.ClientJsonSerializer">
            <summary>Payroll client JSON serializer</summary>
        </member>
        <member name="M:PayrollEngine.ClientJsonSerializer.Deserialize``1(System.String)">
            <summary>Deserialize object using the default options</summary>
            <param name="json">The JSON text</param>
            <typeparam name="T">The object type</typeparam>
            <returns>Object of type T</returns>
        </member>
        <member name="M:PayrollEngine.ClientJsonSerializer.Serialize``1(``0)">
            <summary>Serialize object using the default options</summary>
            <param name="obj">The object to serialize</param>
            <typeparam name="T">The object type</typeparam>
            <returns>The serialized JSON text</returns>
        </member>
        <member name="T:PayrollEngine.CollectType">
            <summary>The collect type</summary>
        </member>
        <member name="F:PayrollEngine.CollectType.Sum">
            <summary>Values summary</summary>
        </member>
        <member name="F:PayrollEngine.CollectType.Min">
            <summary>Minimum value</summary>
        </member>
        <member name="F:PayrollEngine.CollectType.Max">
            <summary>Maximum value</summary>
        </member>
        <member name="F:PayrollEngine.CollectType.Average">
            <summary>Values average</summary>
        </member>
        <member name="F:PayrollEngine.CollectType.Count">
            <summary>Values count</summary>
        </member>
        <member name="T:PayrollEngine.CompareTool">
            <summary>Compare complex objects</summary>
        </member>
        <member name="M:PayrollEngine.CompareTool.Equals``1(``0,``0)">
            <summary>Compare an object containing value, base types are not considered</summary>
            <param name="left">The left object to compare</param>
            <param name="right">The right object to compare</param>
            <returns>True if the objects contains equals values</returns>
        </member>
        <member name="M:PayrollEngine.CompareTool.EqualProperties``1(``0,``0)">
            <summary>Compare objects by properties, base types are not considered</summary>
            <param name="left">The left object to compare</param>
            <param name="right">The right object to compare</param>
            <returns>True if the objects contains equals values</returns>
        </member>
        <member name="M:PayrollEngine.CompareTool.EqualTypeLists``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>Compare a list with object containing value</summary>
            <param name="left">The left item to compare</param>
            <param name="right">The right item to compare</param>
            <returns>True if the lists items are equal</returns>
        </member>
        <member name="M:PayrollEngine.CompareTool.EqualLists(System.Collections.IList,System.Collections.IList)">
            <summary>Compare values of two lists</summary>
            <param name="left">The left item to compare</param>
            <param name="right">The right item to compare</param>
            <returns>True if the list items are equal</returns>
        </member>
        <member name="M:PayrollEngine.CompareTool.EqualDistinctLists``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>Compare distinct items of two lists</summary>
            <param name="left">The left item to compare</param>
            <param name="right">The right item to compare</param>
            <returns>True if the distinct list items are equal</returns>
        </member>
        <member name="M:PayrollEngine.CompareTool.EqualDictionaries``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>Compare two dictionaries</summary>
            <param name="left">The left item to compare</param>
            <param name="right">The right item to compare</param>
            <returns>True if the dictionary items are equal</returns>
        </member>
        <member name="M:PayrollEngine.CompareTool.EqualDictionaries(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>Compare two dictionaries</summary>
            <param name="left">The left item to compare</param>
            <param name="right">The right item to compare</param>
            <returns>True if the dictionary items are equal</returns>
        </member>
        <member name="M:PayrollEngine.CompareTool.EqualBytes(System.Byte[],System.Byte[])">
            <summary>Compare two byte arrays</summary>
            <param name="left">The left bytes to compare</param>
            <param name="right">The right bytes to compare</param>
            <returns>True if the byte arrays are equal</returns>
        </member>
        <member name="T:PayrollEngine.ConfigurationExtensions">
            <summary>Configuration helper</summary>
        </member>
        <member name="M:PayrollEngine.ConfigurationExtensions.GetConfiguration``1(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>Get configuration object by type name</summary>
            <param name="configuration">The assembly</param>
            <returns>The configuration object</returns>
        </member>
        <member name="T:PayrollEngine.ContentType">
            <summary>Content types</summary>
        </member>
        <member name="F:PayrollEngine.ContentType.Json">
            <summary>Json</summary>
        </member>
        <member name="F:PayrollEngine.ContentType.JsonUtf8">
            <summary>Json UTF8</summary>
        </member>
        <member name="T:PayrollEngine.CopyTool">
            <summary>Copy object tool</summary>
        </member>
        <member name="M:PayrollEngine.CopyTool.CopyObjectProperties(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Copy objects properties, base types are not considered</summary>
            <param name="source">The left object to compare</param>
            <param name="target">The right object to compare</param>
            <param name="ignoreAttributes">The property attribute to ignore</param>
        </member>
        <member name="M:PayrollEngine.CopyTool.CopyProperties``1(``0,``0,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Copy typed object properties, base types are not considered</summary>
            <param name="source">The left object to compare</param>
            <param name="target">The right object to compare</param>
            <param name="ignoreAttributes">The property attribute to ignore</param>
        </member>
        <member name="T:PayrollEngine.Country">
            <summary>The payroll countries, ISO ISO 3166-1</summary>
        </member>
        <member name="F:PayrollEngine.Country.None">
            <summary>No country (Default)</summary>
        </member>
        <member name="F:PayrollEngine.Country.Afghanistan">
            <summary>Afghanistan, ISO 004</summary>
        </member>
        <member name="F:PayrollEngine.Country.Albania">
            <summary>Albania, ISO 008</summary>
        </member>
        <member name="F:PayrollEngine.Country.Algeria">
            <summary>Algeria, ISO 012</summary>
        </member>
        <member name="F:PayrollEngine.Country.Andorra">
            <summary>Andorra, ISO 020</summary>
        </member>
        <member name="F:PayrollEngine.Country.Argentina">
            <summary>Argentina, ISO 032</summary>
        </member>
        <member name="F:PayrollEngine.Country.Armenia">
            <summary>Armenia, ISO 051</summary>
        </member>
        <member name="F:PayrollEngine.Country.Australia">
            <summary>Australia, ISO 036</summary>
        </member>
        <member name="F:PayrollEngine.Country.Austria">
            <summary>Austria, ISO 040</summary>
        </member>
        <member name="F:PayrollEngine.Country.Belarus">
            <summary>Belarus, ISO 112</summary>
        </member>
        <member name="F:PayrollEngine.Country.Belgium">
            <summary>Belgium, ISO 056</summary>
        </member>
        <member name="F:PayrollEngine.Country.Bolivia">
            <summary>Bolivia, ISO 068</summary>
        </member>
        <member name="F:PayrollEngine.Country.BosniaAndHerzegovina">
            <summary>Bosnia and Herzegovina, ISO 070</summary>
        </member>
        <member name="F:PayrollEngine.Country.Brazil">
            <summary>Brazil, ISO 076</summary>
        </member>
        <member name="F:PayrollEngine.Country.Bulgaria">
            <summary>Bulgaria, ISO 100</summary>
        </member>
        <member name="F:PayrollEngine.Country.Canada">
            <summary>Canada, ISO 124</summary>
        </member>
        <member name="F:PayrollEngine.Country.Chile">
            <summary>Chile, ISO 152</summary>
        </member>
        <member name="F:PayrollEngine.Country.China">
            <summary>China, ISO 156</summary>
        </member>
        <member name="F:PayrollEngine.Country.Colombia">
            <summary>Colombia, ISO 170</summary>
        </member>
        <member name="F:PayrollEngine.Country.CostaRica">
            <summary>Costa Rica, ISO 188</summary>
        </member>
        <member name="F:PayrollEngine.Country.Croatia">
            <summary>Croatia, ISO 191</summary>
        </member>
        <member name="F:PayrollEngine.Country.Cuba">
            <summary>Cuba, ISO 192</summary>
        </member>
        <member name="F:PayrollEngine.Country.Cyprus">
            <summary>Cyprus, ISO 196</summary>
        </member>
        <member name="F:PayrollEngine.Country.Czechia">
            <summary>Czechia, ISO 203</summary>
        </member>
        <member name="F:PayrollEngine.Country.Denmark">
            <summary>Denmark, ISO 208</summary>
        </member>
        <member name="F:PayrollEngine.Country.Ecuador">
            <summary>Ecuador, ISO 218</summary>
        </member>
        <member name="F:PayrollEngine.Country.Egypt">
            <summary>Egypt, ISO 818</summary>
        </member>
        <member name="F:PayrollEngine.Country.ElSalvador">
            <summary>ElSalvador, ISO 222</summary>
        </member>
        <member name="F:PayrollEngine.Country.Estonia">
            <summary>Estonia, ISO 233</summary>
        </member>
        <member name="F:PayrollEngine.Country.Finland">
            <summary>Finland, ISO 246</summary>
        </member>
        <member name="F:PayrollEngine.Country.France">
            <summary>France, ISO 250</summary>
        </member>
        <member name="F:PayrollEngine.Country.Georgia">
            <summary>Georgia, ISO 268</summary>
        </member>
        <member name="F:PayrollEngine.Country.Germany">
            <summary>Germany, ISO 276</summary>
        </member>
        <member name="F:PayrollEngine.Country.Greece">
            <summary>Greece, ISO 300</summary>
        </member>
        <member name="F:PayrollEngine.Country.Guatemala">
            <summary>Guatemala, ISO 320</summary>
        </member>
        <member name="F:PayrollEngine.Country.Haiti">
            <summary>Haiti, ISO 332</summary>
        </member>
        <member name="F:PayrollEngine.Country.Hungary">
            <summary>Hungary, ISO 348</summary>
        </member>
        <member name="F:PayrollEngine.Country.Iceland">
            <summary>Iceland, ISO 352</summary>
        </member>
        <member name="F:PayrollEngine.Country.India">
            <summary>India, ISO 356</summary>
        </member>
        <member name="F:PayrollEngine.Country.Indonesia">
            <summary>Indonesia, ISO 360</summary>
        </member>
        <member name="F:PayrollEngine.Country.Iran">
            <summary>Iran, ISO 364</summary>
        </member>
        <member name="F:PayrollEngine.Country.Iraq">
            <summary>Iraq, ISO 368</summary>
        </member>
        <member name="F:PayrollEngine.Country.Ireland">
            <summary>Ireland, ISO 372</summary>
        </member>
        <member name="F:PayrollEngine.Country.Israel">
            <summary>Israel, ISO 376</summary>
        </member>
        <member name="F:PayrollEngine.Country.Italy">
            <summary>Italy, ISO 380</summary>
        </member>
        <member name="F:PayrollEngine.Country.Jamaica">
            <summary>Jamaica, ISO 388</summary>
        </member>
        <member name="F:PayrollEngine.Country.Japan">
            <summary>Japan, ISO 392</summary>
        </member>
        <member name="F:PayrollEngine.Country.Jordan">
            <summary>Jordan, ISO 400</summary>
        </member>
        <member name="F:PayrollEngine.Country.Kazakhstan">
            <summary>Kazakhstan, ISO 398</summary>
        </member>
        <member name="F:PayrollEngine.Country.Latvia">
            <summary>Latvia, ISO 428</summary>
        </member>
        <member name="F:PayrollEngine.Country.Liechtenstein">
            <summary>Liechtenstein, ISO 438</summary>
        </member>
        <member name="F:PayrollEngine.Country.Lithuania">
            <summary>Lithuania, ISO 440</summary>
        </member>
        <member name="F:PayrollEngine.Country.Luxembourg">
            <summary>Luxembourg, ISO 442</summary>
        </member>
        <member name="F:PayrollEngine.Country.Malta">
            <summary>Malta, ISO 470</summary>
        </member>
        <member name="F:PayrollEngine.Country.Mexico">
            <summary>Mexico, ISO 484</summary>
        </member>
        <member name="F:PayrollEngine.Country.Montenegro">
            <summary>Montenegro, ISO 499</summary>
        </member>
        <member name="F:PayrollEngine.Country.Nepal">
            <summary>Nepal, ISO 524</summary>
        </member>
        <member name="F:PayrollEngine.Country.Netherlands">
            <summary>Netherlands, ISO 528</summary>
        </member>
        <member name="F:PayrollEngine.Country.NewZealand">
            <summary>New Zealand, ISO 554</summary>
        </member>
        <member name="F:PayrollEngine.Country.Norway">
            <summary>Norway, ISO 578</summary>
        </member>
        <member name="F:PayrollEngine.Country.Peru">
            <summary>Peru, ISO 604</summary>
        </member>
        <member name="F:PayrollEngine.Country.Poland">
            <summary>Poland, ISO 616</summary>
        </member>
        <member name="F:PayrollEngine.Country.Portugal">
            <summary>Portugal, ISO 620</summary>
        </member>
        <member name="F:PayrollEngine.Country.RussianFederation">
            <summary>Russian Federation, ISO 643</summary>
        </member>
        <member name="F:PayrollEngine.Country.SanMarino">
            <summary>San Marino, ISO 674</summary>
        </member>
        <member name="F:PayrollEngine.Country.Serbia">
            <summary>Serbia, ISO 688</summary>
        </member>
        <member name="F:PayrollEngine.Country.Singapore">
            <summary>Singapore, ISO 702</summary>
        </member>
        <member name="F:PayrollEngine.Country.Slovakia">
            <summary>Slovakia, ISO 703</summary>
        </member>
        <member name="F:PayrollEngine.Country.Slovenia">
            <summary>Slovenia, ISO 705</summary>
        </member>
        <member name="F:PayrollEngine.Country.Spain">
            <summary>Spain, ISO 724</summary>
        </member>
        <member name="F:PayrollEngine.Country.Sweden">
            <summary>Sweden, ISO 752</summary>
        </member>
        <member name="F:PayrollEngine.Country.Switzerland">
            <summary>Switzerland, ISO 756</summary>
        </member>
        <member name="F:PayrollEngine.Country.Thailand">
            <summary>Thailand, ISO 764</summary>
        </member>
        <member name="F:PayrollEngine.Country.Tunisia">
            <summary>Tunisia, ISO 788</summary>
        </member>
        <member name="F:PayrollEngine.Country.Turkey">
            <summary>Turkey, ISO 792</summary>
        </member>
        <member name="F:PayrollEngine.Country.Ukraine">
            <summary>Ukraine, ISO 804</summary>
        </member>
        <member name="F:PayrollEngine.Country.UnitedStatesOfAmerica">
            <summary>United States of America, ISO 840</summary>
        </member>
        <member name="F:PayrollEngine.Country.Zimbabwe">
            <summary>Zimbabwe, ISO 716</summary>
        </member>
        <member name="T:PayrollEngine.Data.DataColumn">
            <summary>
            Represents a column in a DataTable
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataColumn.Name">
            <summary>
            Gets or sets the column name
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataColumn.Expression">
            <summary>
            Column expression used to filter rows
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataColumn.ValueType">
            <summary>
            Gets or sets the type of data stored in the column
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataColumn.ValueBaseType">
            <summary>
            Gets or sets the base type of data stored in the column
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataColumn"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataColumn.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataColumn"/> class with data
            </summary>
            <param name="name">The data column name</param>
            <param name="type">The system type</param>
        </member>
        <member name="M:PayrollEngine.Data.DataColumn.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataColumn"/> class with data
            </summary>
            <param name="name">The data column name</param>
            <param name="type">The system type</param>
            <param name="baseType">The system base type</param>
        </member>
        <member name="M:PayrollEngine.Data.DataColumn.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataColumn"/> class with data
            </summary>
            <param name="name">The data column name</param>
            <param name="valueType">The value type</param>
            <param name="valueBaseType">The base value type</param>
        </member>
        <member name="M:PayrollEngine.Data.DataColumn.#ctor(PayrollEngine.Data.DataColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataColumn"/> class from  a copy source
            </summary>
            <param name="copySource">The copy source</param>
        </member>
        <member name="M:PayrollEngine.Data.DataColumn.GetValueType">
            <summary>
            Gets the system value type
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataColumn.SetValueType(System.Type)">
            <summary>
            Gets the system value type
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataColumn.GetValueBaseType">
            <summary>
            Gets the system value base type
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataColumn.SetValueBaseType(System.Type)">
            <summary>
            Gets the system value base type
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataColumn.Equals(PayrollEngine.Data.DataColumn)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataColumn.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:PayrollEngine.Data.DataException">
            <summary>Payroll exception</summary>
        </member>
        <member name="M:PayrollEngine.Data.DataException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Data.DataException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Data.DataException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Data.DataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.Data.DataRelation">
            <summary>
            Represents a data relation in a DataTable
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataRelation.Name">
            <summary>
            Gets or sets the relation name
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataRelation.ParentTable">
            <summary>
            Gets or sets the relation parent table name
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataRelation.ParentColumn">
            <summary>
            Gets or sets the relation parent column names
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataRelation.ChildTable">
            <summary>
            Gets or sets the relation child table name
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataRelation.ChildColumn">
            <summary>
            Gets or sets the relation child column names
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataRelation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataRelation"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataRelation.#ctor(PayrollEngine.Data.DataRelation)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataRelation"/> class from  a copy source
            </summary>
            <param name="copySource">The copy source</param>
        </member>
        <member name="M:PayrollEngine.Data.DataRelation.Equals(PayrollEngine.Data.DataRelation)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRelation.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:PayrollEngine.Data.DataRow">
            <summary>
            Represents a row of data in a table
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataRow.Values">
            <summary>
            Gets or sets the row values (JSON, type matching to the column)
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:PayrollEngine.Data.DataRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataRow"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataRow.#ctor(PayrollEngine.Data.DataRow)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataRow"/> class from  a copy source
            </summary>
            <param name="copySource">The copy source</param>
        </member>
        <member name="M:PayrollEngine.Data.DataRow.Equals(PayrollEngine.Data.DataRow)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRow.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:PayrollEngine.Data.DataRowAttributeExtensions">
            <summary>Data row attribute extension methods</summary>
        </member>
        <member name="M:PayrollEngine.Data.DataRowAttributeExtensions.GetAttributes(System.Data.DataRow)">
            <summary>Get attributes column value as attribute dictionary</summary>
            <param name="dataRow">The data row</param>
            <returns>The attributes dictionary</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowAttributeExtensions.GetAttributes(System.Data.DataRow,System.String)">
            <summary>Get data row json value as attribute dictionary</summary>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <returns>The attributes dictionary</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowAttributeExtensions.GetAttribute``1(System.Data.DataRow,System.String,``0)">
            <summary>Get value from attributes column</summary>
            <param name="dataRow">The data row</param>
            <param name="attribute">The attribute name</param>
            <param name="defaultValue">The default value</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowAttributeExtensions.GetAttribute``1(System.Data.DataRow,System.String,System.String,``0)">
            <summary>Get attribute from a data row json value</summary>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <param name="attribute">The attribute name</param>
            <param name="defaultValue">The default value</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowAttributeExtensions.GetAttribute(System.Data.DataRow,System.String,System.Object)">
            <summary>Get value from attributes column</summary>
            <param name="dataRow">The data row</param>
            <param name="attribute">The attribute name</param>
            <param name="defaultValue">The default value</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowAttributeExtensions.GetAttribute(System.Data.DataRow,System.String,System.String,System.Object)">
            <summary>Get attribute from a data row json value</summary>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <param name="attribute">The attribute name</param>
            <param name="defaultValue">The default value</param>
            <returns>The attribute value</returns>
        </member>
        <member name="T:PayrollEngine.Data.DataRowConversionExtensions">
            <summary>Data row conversion extension methods</summary>
        </member>
        <member name="M:PayrollEngine.Data.DataRowConversionExtensions.TransposeFrom``1(System.Data.DataRow,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Func{``0,System.Object},System.Func{``0,System.Type},System.Func{``0,System.Object})">
            <summary>Transpose enumerable collection to table columns with values</summary>
            <remarks>Use the function return value null, to suppress further item operations</remarks>
            <param name="target">The target data row</param>
            <param name="items">The items to transpose</param>
            <param name="columnName">The column name function (mandatory)</param>
            <param name="itemValue">The item value function (mandatory)</param>
            <param name="columnType">The column type function, default is string</param>
            <param name="defaultValue">The default value function, default is none</param>
        </member>
        <member name="M:PayrollEngine.Data.DataRowConversionExtensions.TransposeFrom``2(System.Data.DataRow,System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,System.String},System.Func{``1,System.Object},System.Func{``0,System.Type},System.Func{``0,System.Object})">
            <summary>Transpose dictionary to table columns with values</summary>
            <remarks>Use the function return value null, to suppress further item operations
            Transpose dynamic object: row.TransposeFrom((IDictionary&lt;string, object&gt;)dynamicObject);</remarks>
            <param name="target">The target data row</param>
            <param name="items">The items to transpose</param>
            <param name="columnName">The column name function (mandatory)</param>
            <param name="itemValue">The item value function (mandatory)</param>
            <param name="columnType">The column type function, default is string</param>
            <param name="defaultValue">The default value function, default is none</param>
        </member>
        <member name="M:PayrollEngine.Data.DataRowConversionExtensions.TransposeFrom(System.Data.DataRow,System.Data.DataRow,System.Func{System.Data.DataColumn,System.String},System.Func{System.Object,System.Object},System.Func{System.Data.DataColumn,System.Type},System.Func{System.Data.DataColumn,System.Object})">
            <summary>Transpose data row items to table columns with values</summary>
            <remarks>Use the function return value null, to suppress further item operations</remarks>
            <param name="target">The target data row</param>
            <param name="source">The source data row</param>
            <param name="columnName">The column name function, default is the source column name</param>
            <param name="itemValue">The item value function, default is the source column value</param>
            <param name="columnType">The column type function, default is the source column type</param>
            <param name="defaultValue">The default value function, default is none</param>
        </member>
        <member name="T:PayrollEngine.Data.DataRowExtensions">
            <summary>Data row extension methods</summary>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetRowId(System.Data.DataRow)">
            <summary>Get data row id</summary>
            <param name="dataRow">The data row</param>
            <returns>The data row id</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetRowName(System.Data.DataRow)">
            <summary>Get data row name</summary>
            <param name="dataRow">The data row</param>
            <returns>The data row name</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetRowIdentifier(System.Data.DataRow)">
            <summary>Get data row identifier</summary>
            <param name="dataRow">The data row</param>
            <returns>The data row identifier</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetRowObjectStatus(System.Data.DataRow)">
            <summary>Get data row object status</summary>
            <param name="dataRow">The data row</param>
            <returns>The data row object status</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetEnumValue``1(System.Data.DataRow,System.String,``0)">
            <summary>Get data row enum value</summary>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <param name="defaultValue">The default value</param>
            <returns>The data row enum value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetValue``1(System.Data.DataRow,System.String,``0)">
            <summary>Get data row value</summary>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <param name="defaultValue">The default value</param>
            <returns>The data row value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.SetValue``1(System.Data.DataRow,System.String,``0)">
            <summary>Set data row value</summary>
            <remarks>Ensures the target column</remarks>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.SetValue(System.Data.DataRow,System.String,System.Object,System.Type)">
            <summary>Set data row value</summary>
            <remarks>Ensures the target column</remarks>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <param name="value">The value to set</param>
            <param name="type">The value type</param>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetPayrollValueType(System.Data.DataRow)">
            <summary>Get default payroll value type</summary>
            <param name="dataRow">The data row</param>
            <returns>The payroll value tye</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetPayrollValueType(System.Data.DataRow,System.String,PayrollEngine.ValueType)">
            <summary>Get payroll value type</summary>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <param name="defaultType">The default value type</param>
            <returns>The payroll value tye</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetPayrollValue``1(System.Data.DataRow,``0)">
            <summary>Get default payroll value</summary>
            <param name="dataRow">The data row</param>
            <param name="defaultValue">The default value</param>
            <returns>The payroll value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetPayrollValue``1(System.Data.DataRow,System.String,System.String,``0)">
            <summary>Get payroll value</summary>
            <param name="dataRow">The data row</param>
            <param name="valueColumn">The value column name</param>
            <param name="valueTypeColumn">The value type column name</param>
            <param name="defaultValue">The default value</param>
            <returns>The payroll value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetPayrollValue(System.Data.DataRow,System.Object)">
            <summary>Get default payroll value</summary>
            <param name="dataRow">The data row</param>
            <param name="defaultValue">The default value</param>
            <returns>The payroll value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetPayrollValue(System.Data.DataRow,System.String,System.String,System.Object)">
            <summary>Get payroll value</summary>
            <param name="dataRow">The data row</param>
            <param name="valueColumn">The value column name</param>
            <param name="valueTypeColumn">The value type column name</param>
            <param name="defaultValue">The default value</param>
            <returns>The payroll value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetValues``1(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,``0)">
            <summary>Get data rows value</summary>
            <param name="dataRows">The data rows</param>
            <param name="column">The column name</param>
            <param name="defaultValue">The default value</param>
            <returns>The data rows value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetListValue``1(System.Data.DataRow,System.String)">
            <summary>Get data row JSON value as list</summary>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <returns>The list</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowExtensions.GetDictionary``2(System.Data.DataRow,System.String)">
            <summary>Get data row JSON value as dictionary</summary>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <returns>The dictionary</returns>
        </member>
        <member name="T:PayrollEngine.Data.DataRowJsonExtensions">
            <summary>Data row json extension methods</summary>
        </member>
        <member name="M:PayrollEngine.Data.DataRowJsonExtensions.GetJsonValue``1(System.Data.DataRow,System.String,System.Object)">
            <summary>Get data row json value</summary>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <param name="defaultValue">The default value</param>
            <returns>The data row value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowJsonExtensions.GetJsonValue(System.Data.DataRow,System.String,System.Type,System.Object)">
            <summary>Get data row json value</summary>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <param name="type">The value type</param>
            <param name="defaultValue">The default value</param>
            <returns>The data row value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowJsonExtensions.SetJsonValue``1(System.Data.DataRow,System.String,``0)">
            <summary>Set data row json value</summary>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:PayrollEngine.Data.DataRowJsonExtensions.SetJsonValue(System.Data.DataRow,System.Type,System.String,System.Object)">
            <summary>Set data row json value</summary>
            <param name="dataRow">The data row</param>
            <param name="type">The value type</param>
            <param name="column">The column name</param>
            <param name="value">The value to set</param>
        </member>
        <member name="T:PayrollEngine.Data.DataRowLocalizationExtensions">
            <summary>Data row localization extension methods</summary>
        </member>
        <member name="M:PayrollEngine.Data.DataRowLocalizationExtensions.GetLocalizedName(System.Data.DataRow,PayrollEngine.Language)">
            <summary>Get data row localized name</summary>
            <param name="dataRow">The data row</param>
            <param name="language">The language</param>
            <returns>The localized data row name</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowLocalizationExtensions.GetLocalizedIdentifier(System.Data.DataRow,PayrollEngine.Language)">
            <summary>Get data row localized identifier</summary>
            <param name="dataRow">The data row</param>
            <param name="language">The language</param>
            <returns>The localized data row identifier</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowLocalizationExtensions.GetLocalizedValue(System.Data.DataRow,System.String,PayrollEngine.Language)">
            <summary>Get data row localized value using the ValueColumnLocalizations column</summary>
            <param name="dataRow">The data row</param>
            <param name="valueColumn">The value column name</param>
            <param name="language">The language</param>
            <returns>The localized data row value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowLocalizationExtensions.GetLocalizedValue(System.Data.DataRow,System.String,System.String,PayrollEngine.Language)">
            <summary>Get data row localized value</summary>
            <param name="dataRow">The data row</param>
            <param name="valueColumn">The value column name</param>
            <param name="localizationColumn">The localization column name</param>
            <param name="language">The language</param>
            <returns>The localized data row value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowLocalizationExtensions.GetLocalizations(System.Data.DataRow,System.String)">
            <summary>Get data row json value as localizations dictionary</summary>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <returns>The attributes dictionary</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataRowLocalizationExtensions.GetLocalization(System.Data.DataRow,System.String,PayrollEngine.Language,System.String)">
            <summary>Get attribute from a data row JSON value</summary>
            <param name="dataRow">The data row</param>
            <param name="column">The column name</param>
            <param name="language">The language</param>
            <param name="defaultValue">The default value</param>
            <returns>The attribute value</returns>
        </member>
        <member name="T:PayrollEngine.Data.DataSet">
            <summary>
            Represents an in-memory cache of data in tables
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataSet.Name">
            <summary>
            Gets or sets the data set name
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataSet.Tables">
            <summary>
            Gets the collection of tables contained in the data set
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataSet.Relations">
            <summary>
            Gets the collection of table relations contained in the data set
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataSet"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataSet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataSet"/> class
            </summary>
            <param name="name">The data set name</param>
        </member>
        <member name="M:PayrollEngine.Data.DataSet.#ctor(PayrollEngine.Data.DataSet)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataSet"/> class from  a copy source
            </summary>
            <param name="copySource">The copy source</param>
        </member>
        <member name="M:PayrollEngine.Data.DataSet.Equals(PayrollEngine.Data.DataSet)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataSet.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:PayrollEngine.Data.DataSetExtensions">
            <summary>Data set extension methods</summary>
        </member>
        <member name="M:PayrollEngine.Data.DataSetExtensions.HasRows(PayrollEngine.Data.DataSet)">
            <summary>
            Test for payroll data set rows
            </summary>
            <param name="dataSet">The payroll data set to convert</param>
            <returns>True if any row is available</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataSetExtensions.HasRows(System.Data.DataSet)">
            <summary>
            Test for  data set rows
            </summary>
            <param name="dataSet">The system data set to convert</param>
            <returns>True if any row is available</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataSetExtensions.ToSystemDataSet(PayrollEngine.Data.DataSet)">
            <summary>
            Convert a payroll data set to a system data set
            </summary>
            <param name="dataSet">The payroll data set to convert</param>
            <returns>The system data set</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataSetExtensions.ToPayrollDataSet(System.Data.DataSet)">
            <summary>
            Convert a system data set to a payroll data set
            </summary>
            <param name="dataSet">The system data set to convert</param>
            <returns>The payroll data set</returns>
        </member>
        <member name="T:PayrollEngine.Data.DataTable">
            <summary>
            Represents one table of in-memory data
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataTable.Name">
            <summary>
            Gets or sets the table name
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataTable.Columns">
            <summary>
            Gets the collection of columns that belong to this table
            </summary>
        </member>
        <member name="P:PayrollEngine.Data.DataTable.Rows">
            <summary>
            Gets the collection of rows that belong to this table
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataTable"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataTable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataTable"/> class with items
            </summary>
        </member>
        <member name="M:PayrollEngine.Data.DataTable.#ctor(PayrollEngine.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.Data.DataTable"/> class from  a copy source
            </summary>
            <param name="copySource">The copy source</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTable.GetRawValues(PayrollEngine.Data.DataRow)">
            <summary>
            Gets the data row values
            </summary>
            <param name="row">The data row</param>
            <returns>The row raw data</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTable.AddRow(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Add a row with raw data</summary>
            <param name="rawValues">The values to set</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTable.SetRawValues(PayrollEngine.Data.DataRow,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Set row data</summary>
            <param name="row">The data row</param>
            <param name="rawValues">The raw values to set</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTable.Equals(PayrollEngine.Data.DataTable)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTable.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:PayrollEngine.Data.DataTableAttributeExtensions">
            <summary>Data table attribute extension methods</summary>
        </member>
        <member name="M:PayrollEngine.Data.DataTableAttributeExtensions.GetAttributeTable(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Get attribute data table
            </summary>
            <param name="dataTable">The source table</param>
            <param name="attributesTableName">The attributes data table name</param>
            <param name="relationSourceColumn">The relation source column name</param>
            <param name="relationTargetColumn">The relation target column name</param>
            <returns>Data table with attributes, any attribute is a table column</returns>
        </member>
        <member name="T:PayrollEngine.Data.DataTableColumnExtensions">
            <summary>Data table column extension methods</summary>
        </member>
        <member name="M:PayrollEngine.Data.DataTableColumnExtensions.ContainsColumn(System.Data.DataTable,System.String)">
            <summary>Test for table column</summary>
            <param name="table">The table</param>
            <param name="columnName">Name of the column</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTableColumnExtensions.AddColumn``1(System.Data.DataTable,System.String,System.String)">
            <summary>Add table column</summary>
            <param name="table">The table</param>
            <param name="columnName">Name of the column</param>
            <param name="expression">The compute expression</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTableColumnExtensions.AddColumn(System.Data.DataTable,System.String,System.Type,System.String)">
            <summary>Add table column</summary>
            <param name="table">The table</param>
            <param name="columnName">Name of the column</param>
            <param name="type">The column type</param>
            <param name="expression">The compute expression</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTableColumnExtensions.InsertColumn``1(System.Data.DataTable,System.Int32,System.String,System.String)">
            <summary>Insert table column at certain list position</summary>
            <param name="table">The table</param>
            <param name="index">The column list position</param>
            <param name="columnName">Name of the column</param>
            <param name="expression">The compute expression</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTableColumnExtensions.EnsureColumn``1(System.Data.DataTable,System.String,System.String)">
            <summary>Ensure table column</summary>
            <param name="table">The table</param>
            <param name="columnName">Name of the column</param>
            <param name="expression">The compute expression</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTableColumnExtensions.EnsureColumn(System.Data.DataTable,System.String,System.Type,System.String)">
            <summary>Ensure table column</summary>
            <param name="table">The table</param>
            <param name="columnName">Name of the column</param>
            <param name="type">The column type</param>
            <param name="expression">The compute expression</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTableColumnExtensions.EnsureColumns``1(System.Data.DataTable,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Ensure table columns</summary>
            <param name="table">The table</param>
            <param name="columns">The columns to ensure</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTableColumnExtensions.EnsureColumns(System.Data.DataTable,System.Data.DataColumnCollection)">
            <summary>Ensure table column</summary>
            <param name="table">The table</param>
            <param name="columns">The columns to ensure</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTableColumnExtensions.RenameColumn(System.Data.DataTable,System.String,System.String)">
            <summary>Rename table column</summary>
            <param name="table">The table</param>
            <param name="oldColumnName">Existing name of the column</param>
            <param name="newColumnName">Existing name of the column</param>
            <returns>The column name</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableColumnExtensions.RemoveColumn(System.Data.DataTable,System.String)">
            <summary>Remove table column</summary>
            <param name="table">The table</param>
            <param name="columnName">Name of the column</param>
        </member>
        <member name="T:PayrollEngine.Data.DataTableConversionExtensions">
            <summary>Data table conversion extension methods</summary>
        </member>
        <member name="M:PayrollEngine.Data.DataTableConversionExtensions.ToPayrollDataTable(System.Collections.IEnumerable,System.String)">
            <summary>
            Convert an object list to a payroll data table
            </summary>
            <param name="items">The items to convert</param>
            <param name="tableName">The table name, default is the type name</param>
            <returns>Data table with items data</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableConversionExtensions.ToPayrollDataTable(System.Data.DataTable)">
            <summary>
            Convert a system data table to a payroll data table
            </summary>
            <param name="dataTable">The system data table to convert</param>
            <returns>The payroll data table</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableConversionExtensions.ToSystemDataTable(System.Collections.IEnumerable,System.String,System.Boolean,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Convert items to a system data set
            </summary>
            <param name="items">The items to convert</param>
            <param name="tableName">The table name, default is the type name</param>
            <param name="includeRows">Include table rows</param>
            <param name="primaryKey">The primary key column name</param>
            <param name="properties">The properties to convert int columns (default: all)</param>
            <remarks>Property expressions:
            simple property: {PropertyName}
            child property: {ChildName1}.{ChildNameN}.{PropertyName}
            dictionary property: {ChildName}.{PropertyName}.{DictionaryKey}</remarks>
            <returns>Data table with items data</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableConversionExtensions.ToSystemDataTable(PayrollEngine.Data.DataTable)">
            <summary>
            Convert a payroll data table to a system data table
            </summary>
            <param name="dataTable">The payroll data table to convert</param>
            <returns>The system data table</returns>
        </member>
        <member name="T:PayrollEngine.Data.DataTableExtensions">
            <summary>Data table extension methods</summary>
        </member>
        <member name="M:PayrollEngine.Data.DataTableExtensions.SetPrimaryKey(System.Data.DataTable,System.String)">
            <summary>Set the table primary key column</summary>
            <param name="table">The table</param>
            <param name="columnName">Name of the column</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTableExtensions.RemovePrimaryKey(System.Data.DataTable)">
            <summary>Remove the table primary key</summary>
            <param name="table">The table</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTableExtensions.GetValues``1(System.Data.DataTable,System.String,``0)">
            <summary>Get data table rows value</summary>
            <param name="dataTable">The data table</param>
            <param name="column">The column name</param>
            <param name="defaultValue">The default value</param>
            <returns>The data table rows value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableExtensions.GetDictionary(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>Get data table rows JSON value as dictionary</summary>
            <param name="dataTable">The data table</param>
            <param name="column">The column name</param>
            <param name="keyField">The json object key field</param>
            <param name="valueField">The json object value field</param>
            <returns>The data table rows value</returns>
        </member>
        <member name="T:PayrollEngine.Data.DataTableItemExtensions">
            <summary>Data table item extension methods</summary>
        </member>
        <member name="M:PayrollEngine.Data.DataTableItemExtensions.AppendItems(System.Data.DataTable,System.Collections.IEnumerable,System.Collections.Generic.IList{System.String})">
            <summary>
            Append items to a system data table
            </summary>
            <param name="dataTable">The target table</param>
            <param name="items">The items to convert</param>
            <param name="properties">The properties to convert int columns (default: all)</param>
            <remarks>Property expressions:
            simple property: {PropertyName}
            child property: {ChildName1}.{ChildNameN}.{PropertyName}
            dictionary property: {ChildName}.{PropertyName}.{DictionaryKey}</remarks>
            <returns>Data table with items data</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableItemExtensions.AppendItem(System.Data.DataTable,System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Append items to a system data table
            </summary>
            <param name="dataTable">The target table</param>
            <param name="item">The items to append</param>
            <param name="properties">The properties to convert int columns (default: all)</param>
            <remarks>Property expressions:
            simple property: {PropertyName}
            child property: {ChildName1}.{ChildNameN}.{PropertyName}
            dictionary property: {ChildName}.{PropertyName}.{DictionaryKey}</remarks>
            <returns>Data table with items data</returns>
        </member>
        <member name="T:PayrollEngine.Data.DataTableRowExtensions">
            <summary>Data table row extension methods</summary>
        </member>
        <member name="M:PayrollEngine.Data.DataTableRowExtensions.Rows(System.Data.DataTable)">
            <summary>Get table rows</summary>
            <param name="table">The table</param>
            <returns>A row collection</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableRowExtensions.HasRows(System.Data.DataTable)">
            <summary>Test for any table rows</summary>
            <param name="table">The table</param>
            <returns>True if rows are present</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableRowExtensions.IsSingleRow(System.Data.DataTable)">
            <summary>Test for single row table</summary>
            <param name="table">The table</param>
            <returns>True for a single row collection</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableRowExtensions.SingleRow(System.Data.DataTable)">
            <summary>Get single row table</summary>
            <param name="table">The table</param>
            <returns>The single row</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableRowExtensions.AsSingleRow(System.Data.DataTable)">
            <summary>Get as single row table</summary>
            <param name="table">The table</param>
            <returns>The single row, null on table with multiple rows</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableRowExtensions.GetSingleRowId(System.Data.DataTable)">
            <summary>Get single row id</summary>
            <param name="table">The table</param>
            <returns>The data row id</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableRowExtensions.GetSingleRowName(System.Data.DataTable)">
            <summary>Get single row name</summary>
            <param name="table">The table</param>
            <returns>The data row name</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableRowExtensions.GetSingleRowIdentifier(System.Data.DataTable)">
            <summary>Get single row identifier</summary>
            <param name="table">The table</param>
            <returns>The data row identifier</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableRowExtensions.GetSingleRowValue``1(System.Data.DataTable,System.String,``0)">
            <summary>Get single row table value</summary>
            <param name="table">The table</param>
            <param name="column">The column name</param>
            <param name="defaultValue">The default value</param>
            <returns>The data row value</returns>
        </member>
        <member name="M:PayrollEngine.Data.DataTableRowExtensions.SelectRows(System.Data.DataTable,System.String)">
            <summary>Select table rows by filter</summary>
            <param name="table">The table</param>
            <param name="filterExpression">The filter matching the rows to delete</param>
        </member>
        <member name="M:PayrollEngine.Data.DataTableRowExtensions.DeleteRows(System.Data.DataTable,System.String)">
            <summary>Delete table rows by filter</summary>
            <param name="table">The table</param>
            <param name="filterExpression">The filter matching the rows to delete</param>
        </member>
        <member name="T:PayrollEngine.Date">
            <summary>Date specifications and base functions</summary>
        </member>
        <member name="P:PayrollEngine.Date.MinValue">
            <summary>Represents the smallest possible value of a time instant</summary>
        </member>
        <member name="P:PayrollEngine.Date.MaxValue">
            <summary>Represents the largest possible value of a time instant</summary>
        </member>
        <member name="P:PayrollEngine.Date.Now">
            <summary>Gets a time instant that is set to the current date and time</summary>
        </member>
        <member name="P:PayrollEngine.Date.Today">
            <summary>Gets a time instant that is set to the current day</summary>
        </member>
        <member name="M:PayrollEngine.Date.PreviousTick(System.DateTime)">
            <summary>Get the previous tick</summary>
            <param name="dateTime">The source date time</param>
            <returns>The previous tick</returns>
        </member>
        <member name="M:PayrollEngine.Date.NextTick(System.DateTime)">
            <summary>Get the next tick</summary>
            <param name="dateTime">The source date time</param>
            <returns>The next tick</returns>
        </member>
        <member name="M:PayrollEngine.Date.IsMidnight(System.DateTime)">
            <summary>Test if the date is midnight.
            See https://stackoverflow.com/questions/681435/what-is-the-best-way-to-determine-if-a-system-datetime-is-midnight
            </summary>
            <param name="moment">The moment to test</param>
            <returns>True in case the moment is date</returns>
        </member>
        <member name="F:PayrollEngine.Date.SemiYearsInYear">
            <summary>Number of semi years in a year</summary>
        </member>
        <member name="F:PayrollEngine.Date.QuartersInYear">
            <summary>Number of quarters in a year</summary>
        </member>
        <member name="F:PayrollEngine.Date.BiMonthsInYear">
            <summary>Number of bi months in a year</summary>
        </member>
        <member name="F:PayrollEngine.Date.MonthsInYear">
            <summary>Number of calendar months in a year</summary>
        </member>
        <member name="F:PayrollEngine.Date.LunisolarMonthsInYear">
            <summary>Number of lunisolar months in a year</summary>
        </member>
        <member name="F:PayrollEngine.Date.SemiMonthsInYear">
            <summary>Number of semi months in a year</summary>
        </member>
        <member name="F:PayrollEngine.Date.DaysInSemiMonth">
            <summary>Days in semi month</summary>
        </member>
        <member name="F:PayrollEngine.Date.BiWeeksInYear">
            <summary>Number of bi weeks in a year</summary>
        </member>
        <member name="F:PayrollEngine.Date.WeeksInYear">
            <summary>Number of weeks in a year</summary>
        </member>
        <member name="F:PayrollEngine.Date.MonthsInSemiYear">
            <summary>Number of months in a half year</summary>
        </member>
        <member name="F:PayrollEngine.Date.MonthsInQuarter">
            <summary>Number of months in a quarter</summary>
        </member>
        <member name="F:PayrollEngine.Date.WeeksInLunisolarMonth">
            <summary>Number of weeks in a lunisolar month</summary>
        </member>
        <member name="F:PayrollEngine.Date.DaysInWeek">
            <summary>Number of days in a week</summary>
        </member>
        <member name="F:PayrollEngine.Date.DaysInBiWeek">
            <summary>Number of days in two week</summary>
        </member>
        <member name="F:PayrollEngine.Date.DaysInLunisolarMonth">
            <summary>Number of days in a lunisolar month</summary>
        </member>
        <member name="F:PayrollEngine.Date.FirstMonthOfCalendarYear">
            <summary>First month in year</summary>
        </member>
        <member name="F:PayrollEngine.Date.FirstDayOfMonth">
            <summary>First day in month</summary>
        </member>
        <member name="F:PayrollEngine.Date.LastMonthOfCalendarYear">
            <summary>Last month in year</summary>
        </member>
        <member name="M:PayrollEngine.Date.DaysInMonth(System.Int32,System.Int32)">
            <summary>Returns the number of days in the specified month and year</summary>
            <param name="year">The year</param>
            <param name="month">The month (a number ranging from 1 to 12)</param>
            <returns>The number of days in <paramref name="month" /> for the specified <paramref name="year" />.
            For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name="year" /> is a leap year</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                    <paramref name="month" /> is less than 1 or greater than 12
            -or-
            <paramref name="year" /> is less than 1 or greater than 9999</exception>
        </member>
        <member name="M:PayrollEngine.Date.DaysInMonth(System.DateTime)">
            <summary>Returns the number of days in the month of a specific date</summary>
            <param name="date">The date</param>
            <returns>The number of days in for the specified <paramref name="date" /></returns>
        </member>
        <member name="M:PayrollEngine.Date.IsPeriod(System.DateTime,System.DateTime)">
            <summary>Test if two dates represents a period</summary>
            <param name="start">The period start</param>
            <param name="end">The period end</param>
            <returns>True if start and end represents a period</returns>
        </member>
        <member name="M:PayrollEngine.Date.IsWithin(System.DateTime,System.DateTime,System.DateTime)">
            <summary>Test if a specific time moment is within a period</summary>
            <param name="start">The period start</param>
            <param name="end">The period end</param>
            <param name="test">The moment to test</param>
            <returns>True if the test is within start and end</returns>
        </member>
        <member name="M:PayrollEngine.Date.RoundLastMoment(System.DateTime)">
            <summary>Round the last moment to the next unit</summary>
            <param name="moment">Moment to round</param>
        </member>
        <member name="M:PayrollEngine.Date.FirstMomentOfYear(System.Int32)">
            <summary>Return the first moment of a year</summary>
            <param name="year">The moment year</param>
            <returns><seealso cref="T:System.DateTime"/> from the first moment in a year</returns>
        </member>
        <member name="M:PayrollEngine.Date.IsFirstMomentOfYear(System.DateTime)">
            <summary>Test if the date is the first moment of the year</summary>
            <param name="moment">Moment to test</param>
            <returns>True on the last moment of the year</returns>
        </member>
        <member name="M:PayrollEngine.Date.LastMomentOfYear(System.Int32)">
            <summary>Return the last moment of a year</summary>
            <param name="year">The moment year</param>
            <returns><seealso cref="T:System.DateTime"/> from the latest moment in a month</returns>
        </member>
        <member name="M:PayrollEngine.Date.IsLastMomentOfYear(System.DateTime)">
            <summary>Test if the date is the last moment of the year</summary>
            <param name="moment">Moment to test</param>
            <returns>True on the last moment of the year</returns>
        </member>
        <member name="M:PayrollEngine.Date.FirstMomentOfMonth(System.Int32,System.Int32)">
            <summary>Return the first moment of a month</summary>
            <param name="year">The moment year</param>
            <param name="month">The moment month</param>
            <returns><seealso cref="T:System.DateTime"/> from the first moment in a month</returns>
        </member>
        <member name="M:PayrollEngine.Date.IsFirstMomentOfMonth(System.DateTime)">
            <summary>Test if the date is the first moment of the month</summary>
            <param name="moment">Moment to test</param>
            <returns>True on the last moment of the month</returns>
        </member>
        <member name="M:PayrollEngine.Date.LastMomentOfMonth(System.Int32,System.Int32)">
            <summary>Return the last moment of a month</summary>
            <param name="year">The moment year</param>
            <param name="month">The moment month</param>
            <returns><seealso cref="T:System.DateTime"/> from the latest moment in a month</returns>
        </member>
        <member name="M:PayrollEngine.Date.IsLastMomentOfMonth(System.DateTime)">
            <summary>Test if the date is the last moment of the month</summary>
            <param name="moment">Moment to test</param>
            <returns>True on the last moment of the month</returns>
        </member>
        <member name="M:PayrollEngine.Date.FirstMomentOfDay(System.DateTime)">
            <summary>Return the first moment of the day</summary>
            <param name="moment">Moment within the day</param>
            <returns><seealso cref="T:System.DateTime"/> from the first moment in a day</returns>
        </member>
        <member name="M:PayrollEngine.Date.IsFirstMomentOfDay(System.DateTime)">
            <summary>Test if the date is the first moment of the day</summary>
            <param name="moment">Moment to test</param>
            <returns>True on the last moment of the day</returns>
        </member>
        <member name="M:PayrollEngine.Date.LastMomentOfDay(System.DateTime)">
            <summary>Return the last moment of the day</summary>
            <param name="moment">Moment within the day</param>
            <returns><seealso cref="T:System.DateTime"/> from the latest moment in a day</returns>
        </member>
        <member name="M:PayrollEngine.Date.IsLastMomentOfDay(System.DateTime)">
            <summary>Test if the date is the last moment of the day</summary>
            <param name="moment">Moment to test</param>
            <returns>True on the last moment of the day</returns>
        </member>
        <member name="M:PayrollEngine.Date.ToCompactString(System.DateTime)">
            <summary>Format a compact date (removes empty time parts)</summary>
            <param name="moment">The period start date</param>
            <returns>The formatted period start date</returns>
        </member>
        <member name="M:PayrollEngine.Date.ToPeriodStartString(System.DateTime)">
            <summary>Format a period start date (removes empty time parts)</summary>
            <param name="start">The period start date</param>
            <returns>The formatted period start date</returns>
        </member>
        <member name="M:PayrollEngine.Date.ToPeriodEndString(System.DateTime)">
            <summary>Format a period end date (removed empty time parts, and round last moment values)</summary>
            <param name="end">The period end date</param>
            <returns>The formatted period end date</returns>
        </member>
        <member name="M:PayrollEngine.Date.ToUtc(System.DateTime)">
            <summary>Convert a date into the UTC value.
            Dates (without time part) are used without time adaption/// </summary>
            <param name="moment">The source date time</param>
            <returns>The UTC date time</returns>
        </member>
        <member name="M:PayrollEngine.Date.ToUtcString(System.DateTime,System.IFormatProvider)">
            <summary>Convert a date into the UTC string value</summary>
            <param name="dateTime">The date time</param>
            <param name="provider">The format provider</param>
            <returns>The UTC date time string</returns>
        </member>
        <member name="M:PayrollEngine.Date.SameSecond(System.DateTime,System.DateTime)">
            <summary>Test if two dates are within the same second</summary>
            <param name="left">The left date to compare</param>
            <param name="right">The right left date to compare</param>
            <returns></returns>
        </member>
        <member name="T:PayrollEngine.DatePeriod">
            <summary>A date period between the start and end date</summary>
        </member>
        <member name="M:PayrollEngine.DatePeriod.#ctor">
            <summary>Create a full period</summary>
        </member>
        <member name="M:PayrollEngine.DatePeriod.#ctor(PayrollEngine.DatePeriod)">
            <summary>Create a moment period</summary>
        </member>
        <member name="M:PayrollEngine.DatePeriod.#ctor(System.DateTime,System.DateTime)">
            <summary>Create a period from start to end</summary>
        </member>
        <member name="M:PayrollEngine.DatePeriod.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>Create a period from conditional start to conditional end</summary>
        </member>
        <member name="P:PayrollEngine.DatePeriod.Start">
            <summary>The period start</summary>
        </member>
        <member name="P:PayrollEngine.DatePeriod.HasStart">
            <summary>Check for start</summary>
        </member>
        <member name="P:PayrollEngine.DatePeriod.End">
            <summary>The period end</summary>
        </member>
        <member name="P:PayrollEngine.DatePeriod.HasEnd">
            <summary>Check for end</summary>
        </member>
        <member name="P:PayrollEngine.DatePeriod.IsOpen">
            <summary>Test for open period (no start or no end)</summary>
        </member>
        <member name="P:PayrollEngine.DatePeriod.IsAnytime">
            <summary>Test for anytime period (without start and end)</summary>
        </member>
        <member name="P:PayrollEngine.DatePeriod.IsMoment">
            <summary>Test is start and end are equal</summary>
        </member>
        <member name="P:PayrollEngine.DatePeriod.IsUtc">
            <summary>Test is start and end are UTC</summary>
        </member>
        <member name="P:PayrollEngine.DatePeriod.Duration">
            <summary>The period duration, only for closed period</summary>
        </member>
        <member name="P:PayrollEngine.DatePeriod.TotalDays">
            <summary>Gets the value of the <see cref="T:System.TimeSpan" /> between start and end expressed in whole and fractional days</summary>
            <returns>The total number of days represented by this instance</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriod.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to this instance</summary>
            <param name="obj">The object to compare with the current object</param>
            <returns>True if the specified <see cref="T:System.Object" /> is equal to this instance</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriod.GetHashCode">
            <summary>Returns a hash code for this instance</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriod.op_Equality(PayrollEngine.DatePeriod,PayrollEngine.DatePeriod)">
            <summary>Compare two date periods for equal values</summary>
            <param name="left">The left period to compare</param>
            <param name="right">The right period to compare</param>
            <returns>True if the periods are equal</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriod.op_Inequality(PayrollEngine.DatePeriod,PayrollEngine.DatePeriod)">
            <summary>Compare two date periods for different values</summary>
            <param name="left">The left period to compare</param>
            <param name="right">The right period to compare</param>
            <returns>True if the periods are different</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriod.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance</returns>
        </member>
        <member name="T:PayrollEngine.DatePeriodExtensions">
            <summary>Extensions for <see cref="T:PayrollEngine.DatePeriod"/></summary>
        </member>
        <member name="M:PayrollEngine.DatePeriodExtensions.IsBefore(PayrollEngine.DatePeriod,System.DateTime)">
            <summary>Test if a specific time moment is before this period</summary>
            <param name="period">The period</param>
            <param name="testMoment">The moment to test</param>
            <returns>True, if the moment is before this period</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriodExtensions.IsBefore(PayrollEngine.DatePeriod,PayrollEngine.DatePeriod)">
            <summary>Test if a specific time period is before this period</summary>
            <param name="period">The period</param>
            <param name="testPeriod">The period to test</param>
            <returns>True, if the period is before this period</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriodExtensions.IsAfter(PayrollEngine.DatePeriod,System.DateTime)">
            <summary>Test if a specific time moment is after this period</summary>
            <param name="period">The period</param>
            <param name="testMoment">The moment to test</param>
            <returns>True, if the moment is after this period</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriodExtensions.IsAfter(PayrollEngine.DatePeriod,PayrollEngine.DatePeriod)">
            <summary>Test if a specific time period is after this period</summary>
            <param name="period">The period</param>
            <param name="testPeriod">The period to test</param>
            <returns>True, if the period is after this period</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriodExtensions.IsWithin(PayrollEngine.DatePeriod,System.DateTime)">
            <summary>Test if a specific time moment is within the period, including open periods</summary>
            <param name="period">The period</param>
            <param name="testMoment">The moment to test</param>
            <returns>True, if the moment is within this period</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriodExtensions.IsWithin(PayrollEngine.DatePeriod,PayrollEngine.DatePeriod)">
            <summary>Test if a specific time period is within the period, including open periods</summary>
            <param name="period">The period</param>
            <param name="testPeriod">The period to test</param>
            <returns>True, if the test period is within this period</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriodExtensions.IsWithinOrBefore(PayrollEngine.DatePeriod,System.DateTime)">
            <summary>Test if a specific time moment is within or before the period, including open periods</summary>
            <param name="period">The period</param>
            <param name="testMoment">The moment to test</param>
            <returns>True, if the moment is within or before this period</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriodExtensions.IsWithinOrAfter(PayrollEngine.DatePeriod,System.DateTime)">
            <summary>Test if a specific time moment is within or after the period, including open periods</summary>
            <param name="period">The period</param>
            <param name="testMoment">The moment to test</param>
            <returns>True, if the moment is within or after this period</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriodExtensions.IsOverlapping(PayrollEngine.DatePeriod,PayrollEngine.DatePeriod)">
            <summary>Test if period is overlapping this period</summary>
            <param name="period">The period</param>
            <param name="testPeriod">The period to test</param>
            <returns>True, if the period is overlapping this period</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriodExtensions.Intersect(PayrollEngine.DatePeriod,PayrollEngine.DatePeriod)">
            <summary>Build the intersection of two date periods</summary>
            <param name="period">The period</param>
            <param name="intersectPeriod">The period to intersect</param>
            <returns>The intersection period, null if no intersection is present</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriodExtensions.Split(PayrollEngine.DatePeriod,System.Collections.Generic.List{System.DateTime})">
            <summary>Split date period by splitting dates</summary>
            <param name="period">The period</param>
            <param name="splitMoments">The moments used to split</param>
            <returns>The splitting periods</returns>
        </member>
        <member name="M:PayrollEngine.DatePeriodExtensions.GetWorkingDaysCount(PayrollEngine.DatePeriod,System.Collections.Generic.IEnumerable{PayrollEngine.DayOfWeek})">
            <summary>Calculate the count of working days</summary>
            <param name="period">The period</param>
            <param name="workingDays">The working days</param>
            <returns>The number of working days</returns>
        </member>
        <member name="T:PayrollEngine.DateTimeDayExtensions">
            <summary>Day extensions for <see cref="T:System.DateTime"/></summary>
        </member>
        <member name="M:PayrollEngine.DateTimeDayExtensions.EnsureLastMomentOfDay(System.DateTime)">
            <summary>Ensure date is thew last moment of the day</summary>
            <param name="moment">The moment to test</param>
            <returns>The last moment of the day</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeDayExtensions.FirstMomentOfDay(System.DateTime)">
            <summary>Return the first moment of the day</summary>
            <param name="dateTime">The date time</param>
            <returns><seealso cref="T:System.DateTime"/> from the first moment in a day</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeDayExtensions.IsFirstMomentOfDay(System.DateTime)">
            <summary>Test if the date is the first moment of the day</summary>
            <param name="dateTime">The date time</param>
            <returns>True on the last moment of the day</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeDayExtensions.LastMomentOfDay(System.DateTime)">
            <summary>Return the last moment of the day</summary>
            <param name="dateTime">The date time</param>
            <returns><seealso cref="T:System.DateTime"/> from the latest moment in a day</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeDayExtensions.IsLastMomentOfDay(System.DateTime)">
            <summary>Test if the date is the last moment of the day.
            Compare the day of the next tick with the current day</summary>
            <param name="dateTime">The date time</param>
            <returns>True on the last moment of the day</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeDayExtensions.IsFirstDayOfCalendarYear(System.DateTime)">
            <summary>Test if date is the first day of year</summary>
            <param name="date">The date to test</param>
            <returns>Return true if the date is in the first dya of the year</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeDayExtensions.IsLastDayOfCalendarYear(System.DateTime)">
            <summary>Test if date is the last day of year</summary>
            <param name="date">The date to test</param>
            <returns>Return true if the date is in the first dya of the year</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeDayExtensions.IsFirstDayOfMonth(System.DateTime)">
            <summary>Test if date is the first day of month</summary>
            <param name="date">The date to test</param>
            <returns>Return true if the date is in the first dya of the year</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeDayExtensions.IsLastDayOfMonth(System.DateTime)">
            <summary>Test if date is the last day of month</summary>
            <param name="date">The date to test</param>
            <returns>Return true if the date is in the first dya of the year</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeDayExtensions.GetPreviousWeekDay(System.DateTime,PayrollEngine.DayOfWeek)">
            <summary>Get the previous matching day</summary>
            <param name="date">The date to start</param>
            <param name="dayOfWeek">Target day of week</param>
            <returns>The previous matching day</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeDayExtensions.GetNextWeekDay(System.DateTime,PayrollEngine.DayOfWeek)">
            <summary>Get the next matching day</summary>
            <param name="date">The date to start</param>
            <param name="dayOfWeek">Target day of week</param>
            <returns>The next matching day</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeDayExtensions.IsDayOfWeek(System.DateTime,System.Collections.Generic.IEnumerable{PayrollEngine.DayOfWeek})">
            <summary>Test for working day</summary>
            <param name="date">The date to test</param>
            <param name="days">Available days</param>
            <returns>True if date is a working day</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeDayExtensions.GetPastDaysCount(System.DateTime)">
            <summary>Get past days count since the minimum available date</summary>
            <param name="date">The date to count</param>
            <returns>Day count since <see cref="F:System.DateTime.MinValue"/></returns>
        </member>
        <member name="T:PayrollEngine.DateTimeExtensions">
            <summary>Extensions for <see cref="T:System.DateTime"/></summary>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.IsUndefined(System.DateTime)">
            <summary>
            Test if the date is undefined
            </summary>
            <param name="dateTime">The date time to test</param>
            <returns>True, if the date time is undefined</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.IsDefined(System.DateTime)">
            <summary>Test if the date is defined</summary>
            <param name="dateTime">The date time to test</param>
            <returns>True, if the date time is defined</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.IsMidnight(System.DateTime)">
            <summary>Test if the date is midnight</summary>
            <param name="moment">The moment to test</param>
            <returns>True in case the moment is date</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.IsWithin(System.DateTime,System.DateTime,System.DateTime)">
            <summary>Test if a specific time moment is within a date period</summary>
            <param name="moment">The moment to test</param>
            <param name="start">The period start</param>
            <param name="end">The period end</param>
            <returns>True if the moment is within the start end end date</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.IsUtc(System.DateTime)">
            <summary>Test if the date is in UTC</summary>
            <param name="dateTime">The source date time</param>
            <returns>True, date time is UTC</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.ToUtc(System.DateTime)">
            <summary>Convert a date into the UTC value. Dates (without time part) are used without time adaption</summary>
            <param name="moment">The source date time</param>
            <returns>The UTC date time</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.ToCompactString(System.DateTime)">
            <summary>Get a compact <see cref="T:System.DateTime"/>, removes empty time value</summary>
            <param name="dateTime">The date time</param>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.ToUtcString(System.DateTime,System.IFormatProvider)">
            <summary>Convert a date into the UTC string value.
            See https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#Roundtrip
            </summary>
            <param name="dateTime">The date time</param>
            <param name="provider">The format provider</param>
            <returns>The UTC date time string</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.ToPeriodStartString(System.DateTime)">
            <summary>Format a period start date (removes empty time parts)</summary>
            <param name="start">The period start date</param>
            <returns>The formatted period start date</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.ToPeriodEndString(System.DateTime)">
            <summary>Format a period end date (removed empty time parts, and round last moment values)</summary>
            <param name="end">The period end date</param>
            <returns>The formatted period end date</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.PreviousTick(System.DateTime)">
            <summary>Get the previous tick</summary>
            <param name="dateTime">The source date time</param>
            <returns>The previous tick</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.NextTick(System.DateTime)">
            <summary>Get the next tick</summary>
            <param name="dateTime">The source date time</param>
            <returns>The next tick</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.RoundLastMoment(System.DateTime)">
            <summary>Round the last moment to the next unit</summary>
            <param name="moment">Moment to round</param>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.IsSameYear(System.DateTime,System.DateTime)">
            <summary>Test if two dates are in the same year</summary>
            <param name="date">The first date to test</param>
            <param name="compare">The second date to test</param>
            <returns>Return true if year and mont of both dates is equal</returns>
        </member>
        <member name="M:PayrollEngine.DateTimeExtensions.IsSameMonth(System.DateTime,System.DateTime)">
            <summary>Test if two dates are in the same year and month</summary>
            <param name="date">The first date to test</param>
            <param name="compare">The second date to test</param>
            <returns>Return true if year and mont of both dates is equal</returns>
        </member>
        <member name="T:PayrollEngine.DayOfWeek">
            <summary>Specifies the day of the week</summary>
        </member>
        <member name="F:PayrollEngine.DayOfWeek.Sunday">
            <summary>Indicates Sunday</summary>
        </member>
        <member name="F:PayrollEngine.DayOfWeek.Monday">
            <summary>Indicates Monday</summary>
        </member>
        <member name="F:PayrollEngine.DayOfWeek.Tuesday">
            <summary>Indicates Tuesday</summary>
        </member>
        <member name="F:PayrollEngine.DayOfWeek.Wednesday">
            <summary>Indicates Wednesday</summary>
        </member>
        <member name="F:PayrollEngine.DayOfWeek.Thursday">
            <summary>Indicates Thursday</summary>
        </member>
        <member name="F:PayrollEngine.DayOfWeek.Friday">
            <summary>Indicates Friday</summary>
        </member>
        <member name="F:PayrollEngine.DayOfWeek.Saturday">
            <summary>Indicates Saturday</summary>
        </member>
        <member name="T:PayrollEngine.DecimalExtensions">
            <summary>
            Extensions for <see cref="T:System.Decimal"/>
            </summary>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.AlmostEquals(System.Decimal,System.Decimal)">
            <summary> Determines if the decimal value is equal to (==) the float parameter according to the system specification of number scale</summary>
            <param name="left">The left value to test</param>
            <param name="right">The right value to test</param>
            <returns>True, if both values are withing the system precision scale</returns>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.AlmostEquals(System.Decimal,System.Decimal,System.Int32)">
            <summary>Determines if the decimal value is equal to (==) the float parameter according to the defined precision.
            See https://stackoverflow.com/a/8608505
            </summary>
            <param name="left">The left value to test</param>
            <param name="right">The right value to test</param>
            <param name="precision">The precision, number of digits after the decimal that will be considered when comparing</param>
            <returns>True, if both values are withing the precision scale</returns>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.Truncate(System.Decimal,System.Int32)">
            <summary>Returns the integral digits of the specified decimal, using a step size</summary>
            <param name="value">The decimal number to truncate</param>
            <param name="stepSize">The step size used to truncate</param>
            <returns>The result of d rounded toward zero, to the nearest whole number within the step size</returns>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.RoundUp(System.Decimal,System.Decimal)">
            <summary>Rounds a decimal value up</summary>
            <param name="value">The decimal value to round</param>
            <param name="stepSize">The round step size</param>
            <returns>The up-rounded value</returns>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.RoundDown(System.Decimal,System.Decimal)">
            <summary>Rounds a decimal value down</summary>
            <param name="value">The decimal value to round</param>
            <param name="stepSize">The round step size</param>
            <returns>The rounded value</returns>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.Round(System.Decimal,PayrollEngine.DecimalRounding)">
            <summary>Rounds a decimal value wit predefined rounding type</summary>
            <param name="value">The decimal value to round</param>
            <param name="rounding">The rounding type</param>
            <returns>The rounded value</returns>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.RoundHalf(System.Decimal)">
            <summary>Rounds a decimal value to a one-half (e.g. 50 cents)</summary>
            <param name="value">The decimal value to round</param>
            <returns>The rounded value to one-half</returns>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.RoundFifth(System.Decimal)">
            <summary>Rounds a decimal value to a one-fifth (e.g. 20 cents)</summary>
            <param name="value">The decimal value to round</param>
            <returns>The rounded value to one-fifth</returns>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.RoundTenth(System.Decimal)">
            <summary>Rounds a decimal value to a one-tenth (e.g. 10 cents)</summary>
            <param name="value">The decimal value to round</param>
            <returns>The rounded value to one-tenth</returns>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.RoundTwentieth(System.Decimal)">
            <summary>Rounds a decimal value to a one-twentieth (e.g. 5 cents)</summary>
            <param name="value">The decimal value to round</param>
            <returns>The rounded value to one-twentieth</returns>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.RoundFiftieth(System.Decimal)">
            <summary>Rounds a decimal value to a one-fiftieth (e.g. 2 cents)</summary>
            <param name="value">The decimal value to round</param>
            <returns>The rounded value to one-fiftieth</returns>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.RoundHundredth(System.Decimal)">
            <summary>Rounds a decimal value to a one-hundredth (e.g. 1 cents)</summary>
            <param name="value">The decimal value to round</param>
            <returns>The rounded value to one-hundredth</returns>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.RoundPartOfOne(System.Decimal,System.Int32)">
            <summary>Rounds a decimal value to a one-tenth</summary>
            <param name="value">The decimal value to round</param>
            <param name="divisor">The divisor factor</param>
            <returns>The rounded value to one-tenth</returns>
        </member>
        <member name="M:PayrollEngine.DecimalExtensions.RoundPayroll(System.Decimal)">
            <summary>Round a decimal value using the payroll system precision</summary>
            <param name="value">The decimal value to round</param>
            <returns>The rounded payroll value</returns>
        </member>
        <member name="T:PayrollEngine.DecimalRounding">
            <summary>Decimal rounding types</summary>
        </member>
        <member name="F:PayrollEngine.DecimalRounding.None">
            <summary>No rounding</summary>
        </member>
        <member name="F:PayrollEngine.DecimalRounding.Integer">
            <summary>Round to nearest integer</summary>
        </member>
        <member name="F:PayrollEngine.DecimalRounding.Half">
            <summary>Round to half (e.g. 50 cents)</summary>
        </member>
        <member name="F:PayrollEngine.DecimalRounding.Fifth">
            <summary>Round to one-fifth (e.g. 20 cents)</summary>
        </member>
        <member name="F:PayrollEngine.DecimalRounding.Tenth">
            <summary>Round to one-tenth (e.g. 10 cents)</summary>
        </member>
        <member name="F:PayrollEngine.DecimalRounding.Twentieth">
            <summary>Round to one-twentieth (e.g. 5 cents)</summary>
        </member>
        <member name="F:PayrollEngine.DecimalRounding.Fiftieth">
            <summary>Round to one-fiftieth (e.g. 2 cents)</summary>
        </member>
        <member name="F:PayrollEngine.DecimalRounding.Hundredth">
            <summary>Round to one-hundredth (e.g. 1 cent)</summary>
        </member>
        <member name="T:PayrollEngine.DictionaryExtensions">
            <summary>Extensions for <see cref="T:System.Collections.Generic.IDictionary`2"/></summary>
        </member>
        <member name="M:PayrollEngine.DictionaryExtensions.GetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>Get typed value from a string/object dictionary</summary>
            <param name="source">The source dictionary</param>
            <param name="key">The item key</param>
            <returns>The key value if available, otherwise the default value of the type</returns>
        </member>
        <member name="M:PayrollEngine.DictionaryExtensions.GetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)">
            <summary>Get typed value from a string/object dictionary</summary>
            <param name="source">The source dictionary</param>
            <param name="key">The item key</param>
            <param name="defaultValue">The default value</param>
            <returns>The key value if available, otherwise the default value</returns>
        </member>
        <member name="M:PayrollEngine.DictionaryExtensions.IsNullOrEmpty``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>Test if a dictionary is empty</summary>
            <param name="source">The dictionary to test</param>
            <returns>True if the dictionary is null or empty</returns>
        </member>
        <member name="M:PayrollEngine.DictionaryExtensions.Copy``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>Copy a dictionary, including null check</summary>
            <param name="source">The copy source</param>
            <returns>A new dictionary with the source items</returns>
        </member>
        <member name="M:PayrollEngine.DictionaryExtensions.CopyTo``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>Copy all dictionary value to another dictionary</summary>
            <param name="source">The copy source</param>
            <param name="target">The copy target</param>
        </member>
        <member name="M:PayrollEngine.DictionaryExtensions.ToReadOnly``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``1)">
            <summary>Merge a value into a read only dictionary</summary>
            <param name="source">The copy source</param>
            <param name="key">The key to merge</param>
            <param name="value">The value to merge</param>
        </member>
        <member name="M:PayrollEngine.DictionaryExtensions.ToText``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>Dictionary as text</summary>
            <param name="source">The dictionary to test</param>
            <returns>True if the dictionary is null or empty</returns>
        </member>
        <member name="T:PayrollEngine.DivisionScope">
            <summary>The division scope</summary>
        </member>
        <member name="F:PayrollEngine.DivisionScope.All">
            <summary>All divisions</summary>
        </member>
        <member name="F:PayrollEngine.DivisionScope.Local">
            <summary>Local divisions only</summary>
        </member>
        <member name="F:PayrollEngine.DivisionScope.Global">
            <summary>Global divisions only</summary>
        </member>
        <member name="F:PayrollEngine.DivisionScope.GlobalAndLocal">
            <summary>Global and local divisions</summary>
        </member>
        <member name="T:PayrollEngine.Document.DocumentMetadata">
            <summary>Document meta data</summary>
        </member>
        <member name="P:PayrollEngine.Document.DocumentMetadata.Application">
            <summary>Application name</summary>
        </member>
        <member name="P:PayrollEngine.Document.DocumentMetadata.Author">
            <summary>Author name</summary>
        </member>
        <member name="P:PayrollEngine.Document.DocumentMetadata.Company">
            <summary>Company name</summary>
        </member>
        <member name="P:PayrollEngine.Document.DocumentMetadata.Title">
            <summary>Application title</summary>
        </member>
        <member name="P:PayrollEngine.Document.DocumentMetadata.Category">
            <summary>Application category</summary>
        </member>
        <member name="P:PayrollEngine.Document.DocumentMetadata.Keywords">
            <summary>Application keywords</summary>
        </member>
        <member name="P:PayrollEngine.Document.DocumentMetadata.Comment">
            <summary>Application comment</summary>
        </member>
        <member name="P:PayrollEngine.Document.DocumentMetadata.Created">
            <summary>Application created date</summary>
        </member>
        <member name="P:PayrollEngine.Document.DocumentMetadata.Modified">
            <summary>Application modified date</summary>
        </member>
        <member name="P:PayrollEngine.Document.DocumentMetadata.CustomProperties">
            <summary>Application custom properties</summary>
        </member>
        <member name="T:PayrollEngine.Document.DocumentType">
            <summary>The document type</summary>
        </member>
        <member name="F:PayrollEngine.Document.DocumentType.Word">
            <summary>Word document</summary>
        </member>
        <member name="F:PayrollEngine.Document.DocumentType.Excel">
            <summary>Excel document</summary>
        </member>
        <member name="F:PayrollEngine.Document.DocumentType.Pdf">
            <summary>Pdf document</summary>
        </member>
        <member name="F:PayrollEngine.Document.DocumentType.Xml">
            <summary>XML document</summary>
        </member>
        <member name="F:PayrollEngine.Document.DocumentType.XmlRaw">
            <summary>Raw XML document</summary>
        </member>
        <member name="T:PayrollEngine.Document.DocumentTypeExtensions">
            <summary>Extensions for <see cref="T:PayrollEngine.Document.DocumentType"/></summary>
        </member>
        <member name="M:PayrollEngine.Document.DocumentTypeExtensions.GetFileExtension(PayrollEngine.Document.DocumentType)">
            <summary>Get the document file extension</summary>
            <param name="documentType">The document type</param>
            <returns>The file extension</returns>
        </member>
        <member name="T:PayrollEngine.Document.IDataMerge">
            <summary>Data merge</summary>
        </member>
        <member name="M:PayrollEngine.Document.IDataMerge.IsMergeable(PayrollEngine.Document.DocumentType)">
            <summary>Test if document type is mergeable</summary>
            <param name="documentType">Type of the document</param>
        </member>
        <member name="M:PayrollEngine.Document.IDataMerge.Merge(System.IO.Stream,System.Data.DataSet,PayrollEngine.Document.DocumentType,PayrollEngine.Document.DocumentMetadata)">
            <summary>Merge a document from a stream to a stream</summary>
            <param name="templateStream">Name of the template file</param>
            <param name="dataSet">The data set</param>
            <param name="documentType">Type of the document</param>
            <param name="metadata">The document metadata</param>
            <returns>The merged document stream</returns>
        </member>
        <member name="M:PayrollEngine.Document.IDataMerge.ExcelMerge(System.Data.DataSet,PayrollEngine.Document.DocumentMetadata)">
            <summary>Merge to excel stream</summary>
            <param name="dataSet">The source data</param>
            <param name="metadata">The document meta data</param>
        </member>
        <member name="T:PayrollEngine.EnumerableExtensions">
            <summary>Extensions for <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
        </member>
        <member name="M:PayrollEngine.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Test if a list is empty</summary>
            <param name="source">The list to test</param>
            <returns>True if the list is null or empty</returns>
        </member>
        <member name="M:PayrollEngine.EnumerableExtensions.Copy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Copy a list, including null check</summary>
            <param name="source">The copy source</param>
            <returns>A new list with the source items</returns>
        </member>
        <member name="M:PayrollEngine.EnumerableExtensions.Duplicates``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Get the duplicated values.
            See https://stackoverflow.com/a/3811482
            </summary>
            <param name="source">The copy source</param>
            <returns>A list with the duplicated values</returns>
        </member>
        <member name="T:PayrollEngine.EnumExtensions">
            <summary>Extensions for <see cref="T:System.Enum"/></summary>
        </member>
        <member name="M:PayrollEngine.EnumExtensions.GetFlags``1(``0)">
            <summary>Get all flags</summary>
            <param name="flags">The flags enumeration</param>
            <returns>The available flags</returns>
        </member>
        <member name="T:PayrollEngine.ExceptionExtensions">
            <summary>Extensions for <see cref="T:System.Exception"/></summary>
        </member>
        <member name="M:PayrollEngine.ExceptionExtensions.GetBaseMessage(System.Exception)">
            <summary>Get the base exception message</summary>
            <param name="exception">The top level exception</param>
            <returns>The base exception message</returns>
        </member>
        <member name="T:PayrollEngine.FunctionType">
            <summary>The payroll function type</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.All">
            <summary>All functions</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.Payroll">
            <summary>All payrun with regulation functions</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.Case">
            <summary>All case functions</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.CaseChange">
            <summary>All case functions</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.CaseRelation">
            <summary>All case relation functions</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.Payrun">
            <summary>All report functions</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.Collector">
            <summary>All collector functions</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.WageType">
            <summary>All wage type functions</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.Report">
            <summary>All report functions</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.CaseAvailable">
            <summary>Case available function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.CaseBuild">
            <summary>Case build function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.CaseValidate">
            <summary>Case validate function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.CaseRelationBuild">
            <summary>Case relation build function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.CaseRelationValidate">
            <summary>Case relation validate function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.CollectorStart">
            <summary>Collector start function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.CollectorApply">
            <summary>Collector apply function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.CollectorEnd">
            <summary>Collector end function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.WageTypeValue">
            <summary>Wage type value function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.WageTypeResult">
            <summary>Wage type result function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.PayrunStart">
            <summary>Payrun start function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.PayrunEmployeeAvailable">
            <summary>Payrun employee available function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.PayrunEmployeeStart">
            <summary>Payrun employee start function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.PayrunEmployeeEnd">
            <summary>Payrun employee end function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.PayrunWageTypeAvailable">
            <summary>Payrun wage type available function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.PayrunEnd">
            <summary>Payrun end function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.ReportBuild">
            <summary>Report build function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.ReportStart">
            <summary>Report start function</summary>
        </member>
        <member name="F:PayrollEngine.FunctionType.ReportEnd">
            <summary>Report end function</summary>
        </member>
        <member name="T:PayrollEngine.FunctionTypeExtensions">
            <summary>Extensions for <see cref="T:PayrollEngine.FunctionType"/></summary>
        </member>
        <member name="M:PayrollEngine.FunctionTypeExtensions.ToBitmask(System.Collections.Generic.List{PayrollEngine.FunctionType})">
            <summary>Convert to bitmask</summary>
            <param name="functionTypes">The function types</param>
            <returns>The function type bitmask</returns>
        </member>
        <member name="M:PayrollEngine.FunctionTypeExtensions.ToFunctionTypes(System.Int64)">
            <summary>Convert from bitmask</summary>
            <param name="bitmask">The function types bitmask</param>
            <returns>The function types</returns>
        </member>
        <member name="M:PayrollEngine.FunctionTypeExtensions.ContainsFunction(System.Collections.Generic.List{PayrollEngine.FunctionType},PayrollEngine.FunctionType)">
            <summary>Test if function is available</summary>
            <param name="functionTypes">The function types</param>
            <param name="test">The test function</param>
            <returns>True if the function is available</returns>
        </member>
        <member name="T:PayrollEngine.HashSalt">
            <summary>
            The encryption hash salt
            </summary>
        </member>
        <member name="M:PayrollEngine.HashSalt.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.HashSalt.#ctor(System.String,System.Byte[])">
            <summary>
            Value constructor
            </summary>
            <param name="hash">The hash</param>
            <param name="salt">The salt</param>
        </member>
        <member name="M:PayrollEngine.HashSalt.#ctor(PayrollEngine.HashSalt)">
            <summary>Initializes a new instance from a copy</summary>
            <param name="copySource">The copy source</param>
        </member>
        <member name="M:PayrollEngine.HashSalt.Equals(PayrollEngine.HashSalt)">
            <summary>Compare two objects</summary>
            <param name="compare">The object to compare with this</param>
            <returns>True for objects with the same data</returns>
        </member>
        <member name="P:PayrollEngine.HashSalt.Hash">
            <summary>
            The hash
            </summary>
        </member>
        <member name="P:PayrollEngine.HashSalt.Salt">
            <summary>
            THe salt
            </summary>
        </member>
        <member name="T:PayrollEngine.HashSaltExtensions">
            <summary>
            Password tool
            </summary>
        </member>
        <member name="M:PayrollEngine.HashSaltExtensions.ToHashSalt(System.String)">
            <summary>
            Encrypt password
            </summary>
            <param name="password">The password to encrypt</param>
            <returns></returns>
        </member>
        <member name="M:PayrollEngine.HashSaltExtensions.ToHashSalt(System.String,System.Byte[])">
            <summary>
            Encrypt password with salt
            </summary>
            <remarks>https://riptutorial.com/csharp/example/10258/pbkdf2-for-password-hashing</remarks>
            <param name="password">The password to encrypt</param>
            <param name="salt">The salt</param>
            <returns>The hash salt</returns>
        </member>
        <member name="M:PayrollEngine.HashSaltExtensions.VerifyPassword(PayrollEngine.HashSalt,System.String)">
            <summary>
            Verify an encrypted password
            </summary>
            <param name="verifyPassword">The password to verify</param>
            <param name="hashSalt">The hash salt to use</param>
            <returns>True for valid password</returns>
        </member>
        <member name="T:PayrollEngine.IApiControllerContext">
            <summary>Api controller context</summary>
        </member>
        <member name="M:PayrollEngine.IApiControllerContext.Activate(System.Type)">
            <summary>Activates the Api controller context</summary>
            <param name="targetType">The target type</param>
            <returns>The Api controller</returns>
        </member>
        <member name="T:PayrollEngine.IAttributeObject">
            <summary>Object containing attributes</summary>
        </member>
        <member name="P:PayrollEngine.IAttributeObject.Attributes">
            <summary>Custom object attributes</summary>
        </member>
        <member name="T:PayrollEngine.IIdentifierObject">
            <summary>Object identified by identifier</summary>
        </member>
        <member name="P:PayrollEngine.IIdentifierObject.Identifier">
            <summary>The object identifier</summary>
        </member>
        <member name="T:PayrollEngine.ILogger">
            <summary>Payroll engine logger</summary>
        </member>
        <member name="M:PayrollEngine.ILogger.IsEnabled(PayrollEngine.LogLevel)">
            <summary>Checks if the given <paramref name="logLevel"/> is enabled</summary>
            <param name="logLevel">Level to be checked.</param>
            <returns><c>true</c> if enabled.</returns>
        </member>
        <member name="M:PayrollEngine.ILogger.Write(PayrollEngine.LogLevel,System.String,System.Object[])">
            <summary>Write a log event with the specified level</summary>
            <param name="level">The level of the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
        </member>
        <member name="M:PayrollEngine.ILogger.Write(PayrollEngine.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the specified level and associated exception</summary>
            <param name="level">The level of the event</param>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
        </member>
        <member name="M:PayrollEngine.ILogger.Trace(System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Verbose"/> level</summary>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:PayrollEngine.ILogger.Trace(System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Verbose"/> level and associated exception</summary>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:PayrollEngine.ILogger.Debug(System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Debug"/> level</summary>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:PayrollEngine.ILogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Debug"/> level and associated exception</summary>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception");
            </example>
        </member>
        <member name="M:PayrollEngine.ILogger.Information(System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Information"/> level</summary>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:PayrollEngine.ILogger.Information(System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Information"/> level and associated exception</summary>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:PayrollEngine.ILogger.Warning(System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Warning"/> level</summary>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:PayrollEngine.ILogger.Warning(System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Warning"/> level and associated exception</summary>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:PayrollEngine.ILogger.Error(System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Error"/> level</summary>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:PayrollEngine.ILogger.Error(System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Error"/> level and associated exception</summary>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:PayrollEngine.ILogger.Critical(System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Fatal"/> level</summary>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:PayrollEngine.ILogger.Critical(System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Fatal"/> level and associated exception</summary>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="T:PayrollEngine.INameObject">
            <summary>Object identified by name</summary>
        </member>
        <member name="P:PayrollEngine.INameObject.Name">
            <summary>The object name</summary>
        </member>
        <member name="T:PayrollEngine.IO.FileExtensions">
            <summary>Common file extensions</summary>
        </member>
        <member name="F:PayrollEngine.IO.FileExtensions.Xml">
            <summary>XML file extension</summary>
        </member>
        <member name="F:PayrollEngine.IO.FileExtensions.Json">
            <summary>JSON file extension</summary>
        </member>
        <member name="F:PayrollEngine.IO.FileExtensions.JsonSchema">
            <summary>JSON schema file extension</summary>
        </member>
        <member name="F:PayrollEngine.IO.FileExtensions.WordDocument">
            <summary>Word document</summary>
        </member>
        <member name="F:PayrollEngine.IO.FileExtensions.ExcelDocument">
            <summary>Excel document</summary>
        </member>
        <member name="F:PayrollEngine.IO.FileExtensions.PdfDocument">
            <summary>Pdf document</summary>
        </member>
        <member name="T:PayrollEngine.IO.FileTool">
            <summary>File tools</summary>
        </member>
        <member name="M:PayrollEngine.IO.FileTool.CurrentTimeStamp">
            <summary>Get the current local file time stamp name</summary>
            <returns>The file name</returns>
        </member>
        <member name="M:PayrollEngine.IO.FileTool.TimeStamp(System.DateTime)">
            <summary>Get the file time stamp name</summary>
            <param name="moment">The time moment</param>
            <returns>The file name</returns>
        </member>
        <member name="T:PayrollEngine.IPayrollPeriod">
            <summary>Payroll date period</summary>
        </member>
        <member name="P:PayrollEngine.IPayrollPeriod.Start">
            <summary>The period start</summary>
        </member>
        <member name="P:PayrollEngine.IPayrollPeriod.End">
            <summary>The period end</summary>
        </member>
        <member name="P:PayrollEngine.IPayrollPeriod.Name">
            <summary>The period name</summary>
        </member>
        <member name="M:PayrollEngine.IPayrollPeriod.GetPayrollPeriod(System.DateTime,System.Int32)">
            <summary>Get the payroll period by moment</summary>
            <param name="moment">The moment of the period</param>
            <param name="offset">The offset:<br />
            less than zero: past<br />
            zero: current<br />
            greater than zero: future<br /></param>
            <returns>Payroll moment period</returns>
        </member>
        <member name="T:PayrollEngine.JsonExtensions">
            <summary>Json extensions</summary>
        </member>
        <member name="M:PayrollEngine.JsonExtensions.GetSystemType(System.Text.Json.JsonValueKind)">
            <summary>Gets the type of the system</summary>
            <param name="valueKind">Kind of the value</param>
            <returns>The system type</returns>
        </member>
        <member name="M:PayrollEngine.JsonExtensions.GetSystemType(System.Text.Json.JsonValueKind,System.Object)">
            <summary>Gets the type of the system</summary>
            <param name="valueKind">Kind of the value</param>
            <param name="value">The value, used to determine the numeric type</param>
            <returns>The system type</returns>
        </member>
        <member name="M:PayrollEngine.JsonExtensions.GetValue(System.Text.Json.JsonElement)">
            <summary>Get the json element value</summary>
            <param name="jsonElement">The json element</param>
            <returns>The json element value</returns>
        </member>
        <member name="T:PayrollEngine.Language">
            <summary>The payroll languages</summary>
            <remarks>Do not change the language order</remarks>
        </member>
        <member name="F:PayrollEngine.Language.English">
            <summary>English (Default)</summary>
        </member>
        <member name="F:PayrollEngine.Language.Afrikaans">
            <summary>Afrikaans</summary>
        </member>
        <member name="F:PayrollEngine.Language.Arabic">
            <summary>Arabic</summary>
        </member>
        <member name="F:PayrollEngine.Language.Azerbaijani">
            <summary>Azerbaijani</summary>
        </member>
        <member name="F:PayrollEngine.Language.Belarusian">
            <summary>Belarusian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Bulgarian">
            <summary>Bulgarian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Bosnian">
            <summary>Bosnian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Czech">
            <summary>Czech</summary>
        </member>
        <member name="F:PayrollEngine.Language.Danish">
            <summary>Danish</summary>
        </member>
        <member name="F:PayrollEngine.Language.German">
            <summary>German</summary>
        </member>
        <member name="F:PayrollEngine.Language.Greek">
            <summary>Greek</summary>
        </member>
        <member name="F:PayrollEngine.Language.Spanish">
            <summary>Spanish</summary>
        </member>
        <member name="F:PayrollEngine.Language.Estonian">
            <summary>Estonian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Persian">
            <summary>Persian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Finnish">
            <summary>Finnish</summary>
        </member>
        <member name="F:PayrollEngine.Language.French">
            <summary>French</summary>
        </member>
        <member name="F:PayrollEngine.Language.Irish">
            <summary>Irish</summary>
        </member>
        <member name="F:PayrollEngine.Language.Hebrew">
            <summary>Hebrew</summary>
        </member>
        <member name="F:PayrollEngine.Language.Hindi">
            <summary>Hindi</summary>
        </member>
        <member name="F:PayrollEngine.Language.Croatian">
            <summary>Croatian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Hungarian">
            <summary>Hungarian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Armenian">
            <summary>Armenian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Icelandic">
            <summary>Icelandic</summary>
        </member>
        <member name="F:PayrollEngine.Language.Italian">
            <summary>Italian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Japanese">
            <summary>Japanese</summary>
        </member>
        <member name="F:PayrollEngine.Language.Georgian">
            <summary>Georgian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Korean">
            <summary>Korean</summary>
        </member>
        <member name="F:PayrollEngine.Language.Luxembourgish">
            <summary>Luxembourgish</summary>
        </member>
        <member name="F:PayrollEngine.Language.Lithuanian">
            <summary>Lithuanian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Latvian">
            <summary>Latvian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Macedonian">
            <summary>Macedonian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Dutch">
            <summary>Dutch</summary>
        </member>
        <member name="F:PayrollEngine.Language.Norwegian">
            <summary>Norwegian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Polish">
            <summary>Polish</summary>
        </member>
        <member name="F:PayrollEngine.Language.Portuguese">
            <summary>Portuguese</summary>
        </member>
        <member name="F:PayrollEngine.Language.Romanian">
            <summary>Romanian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Russian">
            <summary>Russian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Slovak">
            <summary>Slovak</summary>
        </member>
        <member name="F:PayrollEngine.Language.Slovenian">
            <summary>Slovenian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Albanian">
            <summary>Albanian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Serbian">
            <summary>Serbian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Swedish">
            <summary>Swedish</summary>
        </member>
        <member name="F:PayrollEngine.Language.Thai">
            <summary>Thai</summary>
        </member>
        <member name="F:PayrollEngine.Language.Turkish">
            <summary>Turkish</summary>
        </member>
        <member name="F:PayrollEngine.Language.Ukrainian">
            <summary>Ukrainian</summary>
        </member>
        <member name="F:PayrollEngine.Language.Uzbek">
            <summary>Uzbek</summary>
        </member>
        <member name="F:PayrollEngine.Language.Vietnamese">
            <summary>Vietnamese</summary>
        </member>
        <member name="F:PayrollEngine.Language.Chinese">
            <summary>Chinese</summary>
        </member>
        <member name="T:PayrollEngine.LanguageExtensions">
            <summary>Extensions for <see cref="T:PayrollEngine.Language"/></summary>
        </member>
        <member name="F:PayrollEngine.LanguageExtensions.LanguageCodes">
            <summary>The ISO 639-1 language code</summary>
        </member>
        <member name="M:PayrollEngine.LanguageExtensions.GetLocalization(PayrollEngine.Language,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>Gets the localized text</summary>
            <param name="language">The language</param>
            <param name="localizations">The localizations</param>
            <param name="defaultValue">The default value</param>
            <returns>The localized text, the default value in case of absent language</returns>
        </member>
        <member name="M:PayrollEngine.LanguageExtensions.LanguageCode(PayrollEngine.Language)">
            <summary>Get the ISO 639-1 language code</summary>
            <param name="language">The value type</param>
            <returns>The ISO 639-1 language code</returns>
        </member>
        <member name="T:PayrollEngine.ListExtensions">
            <summary>Extensions for <see cref="T:System.Collections.Generic.IList`1"/></summary>
        </member>
        <member name="M:PayrollEngine.ListExtensions.TryAddNew``1(System.Collections.Generic.IList{``0},``0)">
            <summary>Try to add a new value to a list</summary>
            <param name="source">The list</param>
            <param name="value">The value to add</param>
            <returns>True if the value was added</returns>
        </member>
        <member name="M:PayrollEngine.ListExtensions.AddNew``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Try to add new values to a list</summary>
            <param name="source">The list</param>
            <param name="values">The values to add</param>
            <returns>The added values</returns>
        </member>
        <member name="T:PayrollEngine.Log">
            <summary>Static logger</summary>
        </member>
        <member name="P:PayrollEngine.Log.Logger">
            <summary>The static logger</summary>
        </member>
        <member name="M:PayrollEngine.Log.SetLogger(PayrollEngine.ILogger)">
            <summary>Set logger based on the configuration</summary>
            <param name="logger">The static logger</param>
        </member>
        <member name="M:PayrollEngine.Log.GetLogger">
            <summary>Get the logger</summary>
            <returns>The logger</returns>
        </member>
        <member name="M:PayrollEngine.Log.IsEnabled(PayrollEngine.LogLevel)">
            <summary>Determine if events at the specified level will be passed through to the log sinks</summary>
            <param name="level">Level to check</param>
            <returns>True if the level is enabled; otherwise, false</returns>
        </member>
        <member name="M:PayrollEngine.Log.Write(PayrollEngine.LogLevel,System.String,System.Object[])">
            <summary>Write a log event with the specified level</summary>
            <param name="level">The level of the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
        </member>
        <member name="M:PayrollEngine.Log.Write(PayrollEngine.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the specified level and associated exception</summary>
            <param name="level">The level of the event</param>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
        </member>
        <member name="M:PayrollEngine.Log.Trace(System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Verbose"/> level</summary>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:PayrollEngine.Log.Trace(System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Verbose"/> level and associated exception</summary>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:PayrollEngine.Log.Debug(System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Debug"/> level</summary>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:PayrollEngine.Log.Debug(System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Debug"/> level and associated exception</summary>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception");
            </example>
        </member>
        <member name="M:PayrollEngine.Log.Information(System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Information"/> level</summary>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:PayrollEngine.Log.Information(System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Information"/> level and associated exception</summary>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:PayrollEngine.Log.Warning(System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Warning"/> level</summary>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:PayrollEngine.Log.Warning(System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Warning"/> level and associated exception</summary>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:PayrollEngine.Log.Error(System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Error"/> level</summary>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:PayrollEngine.Log.Error(System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Error"/> level and associated exception</summary>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:PayrollEngine.Log.Critical(System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Fatal"/> level</summary>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:PayrollEngine.Log.Critical(System.Exception,System.String,System.Object[])">
            <summary>Write a log event with the <see cref="F:PayrollEngine.LogLevel.Fatal"/> level and associated exception</summary>
            <param name="exception">Exception related to the event</param>
            <param name="messageTemplate">Message template describing the event</param>
            <param name="propertyValues">Objects positionally formatted into the message template</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="T:PayrollEngine.LogLevel">
            <summary>Specifies the meaning and relative importance of a log event</summary>
        </member>
        <member name="F:PayrollEngine.LogLevel.Verbose">
            <summary>Anything and everything you might want to know about a running block of code</summary>
        </member>
        <member name="F:PayrollEngine.LogLevel.Debug">
            <summary>Internal system events that aren't necessarily observable from the outside</summary>
        </member>
        <member name="F:PayrollEngine.LogLevel.Information">
            <summary>The lifeblood of operational intelligence - things happen</summary>
        </member>
        <member name="F:PayrollEngine.LogLevel.Warning">
            <summary>Service is degraded or endangered</summary>
        </member>
        <member name="F:PayrollEngine.LogLevel.Error">
            <summary>Functionality is unavailable, invariants are broken or data is lost</summary>
        </member>
        <member name="F:PayrollEngine.LogLevel.Fatal">
            <summary>If you have a pager, it goes off when one of these occurs/// </summary>
        </member>
        <member name="T:PayrollEngine.LogStopwatch">
            <exclude />
            <summary>
            A log stopwatch
            </summary>
            <remarks>
            Activate with the pre-processor directive
            #define LOG_STOPWATCH
            </remarks>
        </member>
        <member name="M:PayrollEngine.LogStopwatch.Start(System.String)">
            <summary>Start a new log stopwatch by name</summary>
            <param name="name">The stopwatch name</param>
        </member>
        <member name="M:PayrollEngine.LogStopwatch.Stop(System.String,PayrollEngine.LogLevel)">
            <summary>Stop a log stopwatch by name</summary>
            <param name="name">The stopwatch name</param>
            <param name="logLevel">The logger level, default is information</param>
        </member>
        <member name="T:PayrollEngine.Month">
            <summary>Enumeration with the year months</summary>
        </member>
        <member name="F:PayrollEngine.Month.January">
            <summary>Indicates January</summary>
        </member>
        <member name="F:PayrollEngine.Month.February">
            <summary>Indicates February</summary>
        </member>
        <member name="F:PayrollEngine.Month.March">
            <summary>Indicates March</summary>
        </member>
        <member name="F:PayrollEngine.Month.April">
            <summary>Indicates April</summary>
        </member>
        <member name="F:PayrollEngine.Month.May">
            <summary>Indicates May</summary>
        </member>
        <member name="F:PayrollEngine.Month.June">
            <summary>Indicates June</summary>
        </member>
        <member name="F:PayrollEngine.Month.July">
            <summary>Indicates July</summary>
        </member>
        <member name="F:PayrollEngine.Month.August">
            <summary>Indicates August</summary>
        </member>
        <member name="F:PayrollEngine.Month.September">
            <summary>Indicates September</summary>
        </member>
        <member name="F:PayrollEngine.Month.October">
            <summary>Indicates October</summary>
        </member>
        <member name="F:PayrollEngine.Month.November">
            <summary>Indicates November</summary>
        </member>
        <member name="F:PayrollEngine.Month.December">
            <summary>Indicates December</summary>
        </member>
        <member name="T:PayrollEngine.ObjectInfo">
            <summary>
            Information about a c# object
            </summary>
        </member>
        <member name="M:PayrollEngine.ObjectInfo.GetProperties(System.Type)">
            <summary>
            Get object properties
            </summary>
            <remarks>Use the local type cache</remarks>
            <param name="type">The object type</param>
            <returns>The object property infos</returns>
        </member>
        <member name="M:PayrollEngine.ObjectInfo.GetProperties``1">
            <summary>
            Get object properties
            </summary>
            <returns>The object property infos</returns>
        </member>
        <member name="M:PayrollEngine.ObjectInfo.GetPropertyTypes(System.Type)">
            <summary>
            Get property types of the domain object
            </summary>
            <returns>A dictionary with filed field name (dictionary key) and the field type (dictionary value)</returns>
        </member>
        <member name="M:PayrollEngine.ObjectInfo.GetFieldNames(System.Type)">
            <summary>
            Get field names of the domain object
            </summary>
            <param name="type">The object type</param>
            <returns>A hash set with ordinal ignore case</returns>
        </member>
        <member name="M:PayrollEngine.ObjectInfo.GetProperty(System.Type,System.String)">
            <summary>
            Get object property
            </summary>
            <param name="type">The object type</param>
            <param name="name">The property name</param>
            <returns>The property info</returns>
        </member>
        <member name="M:PayrollEngine.ObjectInfo.ContainsProperty(System.Type,System.String)">
            <summary>
            Test if property exists
            </summary>
            <param name="type">The object type</param>
            <param name="name">The property name</param>
            <returns>A hash set with ordinal ignore case</returns>
        </member>
        <member name="M:PayrollEngine.ObjectInfo.ContainsProperty(System.Type,System.String,System.Type)">
            <summary>
            Test if property from a specific type exists
            </summary>
            <param name="type">The object type</param>
            <param name="name">The property name</param>
            <param name="propertyType">The property type</param>
            <returns>A hash set with ordinal ignore case</returns>
        </member>
        <member name="M:PayrollEngine.ObjectInfo.GetPropertyValue(System.Object,System.String)">
            <summary>
            Get object property value
            </summary>
            <param name="obj">The object</param>
            <param name="name">The property name</param>
            <returns>The property value</returns>
        </member>
        <member name="M:PayrollEngine.ObjectInfo.GetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Get object property value
            </summary>
            <param name="obj">The object</param>
            <param name="name">The property name</param>
            <param name="defaultValue">default value</param>
            <returns>The property value</returns>
        </member>
        <member name="M:PayrollEngine.ObjectInfo.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Set object property value
            </summary>
            <param name="obj">The object</param>
            <param name="name">The property name</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:PayrollEngine.ObjectInfo.ResolvePropertyValue(System.Object,System.String)">
            <summary>
            Resolve property expression
            </summary>
            <param name="item">The value item</param>
            <param name="expression">The property expression</param>
            <returns>Value with property</returns>
        </member>
        <member name="T:PayrollEngine.ObjectStatus">
            <summary>The object status</summary>
        </member>
        <member name="F:PayrollEngine.ObjectStatus.Active">
            <summary>Object is active</summary>
        </member>
        <member name="F:PayrollEngine.ObjectStatus.Inactive">
            <summary>Object is inactive</summary>
        </member>
        <member name="T:PayrollEngine.OverrideType">
            <summary>Override type for derivable object</summary>
        </member>
        <member name="F:PayrollEngine.OverrideType.Active">
            <summary>Active override</summary>
        </member>
        <member name="F:PayrollEngine.OverrideType.Inactive">
            <summary>Inactive override</summary>
        </member>
        <member name="T:PayrollEngine.PayrollException">
            <summary>Payroll exception</summary>
        </member>
        <member name="M:PayrollEngine.PayrollException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.PayrollException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.PayrollException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.PayrollException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.PayrollHttpConfiguration">
            <summary>The Payroll HTTP configuration</summary>
        </member>
        <member name="M:PayrollEngine.PayrollHttpConfiguration.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:PayrollEngine.PayrollHttpConfiguration.#ctor(System.String,System.Int32)">
            <summary>New instance of the Payroll Engine http client with unknown server certificate, timeout is 100 seconds.
            See https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.timeout
            </summary>
            <param name="baseUrl">The Uri the request is sent to</param>
            <param name="port">The backend port</param>
        </member>
        <member name="M:PayrollEngine.PayrollHttpConfiguration.#ctor(System.String,System.Int32,System.TimeSpan)">
            <summary>New instance of Payroll Engine http client with unknown server certificate and request timeout</summary>
            <param name="baseUrl">The Uri the request is sent to</param>
            <param name="port">The backend port</param>
            <param name="requestTimeout">The request timeout</param>
        </member>
        <member name="F:PayrollEngine.PayrollHttpConfiguration.DefaultTimeout">
            <summary>The default API request timeout</summary>
        </member>
        <member name="P:PayrollEngine.PayrollHttpConfiguration.BaseUrl">
            <summary>The API base url</summary>
        </member>
        <member name="P:PayrollEngine.PayrollHttpConfiguration.Port">
            <summary>The API port</summary>
        </member>
        <member name="P:PayrollEngine.PayrollHttpConfiguration.Timeout">
            <summary>The API request timeout</summary>
        </member>
        <member name="M:PayrollEngine.PayrollHttpConfiguration.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance</summary>
        </member>
        <member name="T:PayrollEngine.PayrollMapException">
            <summary>A payroll mapping exception</summary>
        </member>
        <member name="M:PayrollEngine.PayrollMapException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.PayrollMapException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.PayrollMapException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.PayrollMapException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.PayrunException">
            <summary>Payrun exception</summary>
        </member>
        <member name="M:PayrollEngine.PayrunException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.PayrunException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.PayrunException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.PayrunException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.PayrunExecutionPhase">
            <summary>The payrun execution stage</summary>
        </member>
        <member name="F:PayrollEngine.PayrunExecutionPhase.Setup">
            <summary>Job setup execution phase</summary>
        </member>
        <member name="F:PayrollEngine.PayrunExecutionPhase.Reevaluation">
            <summary>Job reevaluation execution phase</summary>
        </member>
        <member name="T:PayrollEngine.PayrunJobResult">
            <summary>The payrun job result</summary>
        </member>
        <member name="F:PayrollEngine.PayrunJobResult.Full">
            <summary>All results</summary>
        </member>
        <member name="F:PayrollEngine.PayrunJobResult.Incremental">
            <summary>Changed period values only</summary>
        </member>
        <member name="T:PayrollEngine.PayrunJobStatus">
            <summary>
            The payrun job status
            Supported state changes:
            - *: Draft | Forecast | Abort
            - Draft: Release | Abort
            - Release: Process | Abort
            - Process: Complete | Cancel
            </summary>
        </member>
        <member name="F:PayrollEngine.PayrunJobStatus.Draft">
            <summary>Draft Legal results (default)</summary>
        </member>
        <member name="F:PayrollEngine.PayrunJobStatus.Release">
            <summary>Legal results are released for processing</summary>
        </member>
        <member name="F:PayrollEngine.PayrunJobStatus.Process">
            <summary>Legal results are processed</summary>
        </member>
        <member name="F:PayrollEngine.PayrunJobStatus.Complete">
            <summary>Legal results has been processed successfully</summary>
        </member>
        <member name="F:PayrollEngine.PayrunJobStatus.Forecast">
            <summary>Forecast results</summary>
        </member>
        <member name="F:PayrollEngine.PayrunJobStatus.Abort">
            <summary>Unreleased Job has been aborted</summary>
        </member>
        <member name="F:PayrollEngine.PayrunJobStatus.Cancel">
            <summary>Released Job has been canceled</summary>
        </member>
        <member name="T:PayrollEngine.PayrunJobStatusExtensions">
            <summary>Extensions for <see cref="T:PayrollEngine.PayrunJobStatus"/></summary>
        </member>
        <member name="M:PayrollEngine.PayrunJobStatusExtensions.IsDraft(PayrollEngine.PayrunJobStatus)">
            <summary>Test if the payrun job is in a draft state</summary>
            <param name="jobStatus">The payrun job status</param>
            <returns>True, if the state is a draft state</returns>
        </member>
        <member name="M:PayrollEngine.PayrunJobStatusExtensions.IsRelease(PayrollEngine.PayrunJobStatus)">
            <summary>Test if the payrun job is in a release state</summary>
            <param name="jobStatus">The payrun job status</param>
            <returns>True, if the state is a release state</returns>
        </member>
        <member name="M:PayrollEngine.PayrunJobStatusExtensions.IsProcess(PayrollEngine.PayrunJobStatus)">
            <summary>Test if the payrun job is in a process state</summary>
            <param name="jobStatus">The payrun job status</param>
            <returns>True, if the state is a process state</returns>
        </member>
        <member name="M:PayrollEngine.PayrunJobStatusExtensions.IsComplete(PayrollEngine.PayrunJobStatus)">
            <summary>Test if the payrun job is in a complete state</summary>
            <param name="jobStatus">The payrun job status</param>
            <returns>True, if the state is a complete state</returns>
        </member>
        <member name="M:PayrollEngine.PayrunJobStatusExtensions.IsForecast(PayrollEngine.PayrunJobStatus)">
            <summary>Test if the payrun job is in a forecast state</summary>
            <param name="jobStatus">The payrun job status</param>
            <returns>True, if the state is a forecast state</returns>
        </member>
        <member name="M:PayrollEngine.PayrunJobStatusExtensions.IsAbort(PayrollEngine.PayrunJobStatus)">
            <summary>Test if the payrun job is in a abort state</summary>
            <param name="jobStatus">The payrun job status</param>
            <returns>True, if the state is a abort state</returns>
        </member>
        <member name="M:PayrollEngine.PayrunJobStatusExtensions.IsCancel(PayrollEngine.PayrunJobStatus)">
            <summary>Test if the payrun job is in a cancel state</summary>
            <param name="jobStatus">The payrun job status</param>
            <returns>True, if the state is a cancel state</returns>
        </member>
        <member name="M:PayrollEngine.PayrunJobStatusExtensions.IsWorking(PayrollEngine.PayrunJobStatus)">
            <summary>Test if the payrun job is in a working state</summary>
            <param name="jobStatus">The payrun job status</param>
            <returns>True, if the state is a working state</returns>
        </member>
        <member name="M:PayrollEngine.PayrunJobStatusExtensions.IsLegal(PayrollEngine.PayrunJobStatus)">
            <summary>Test if the payrun job is in a working state</summary>
            <param name="jobStatus">The payrun job status</param>
            <returns>True, if the state is a working state</returns>
        </member>
        <member name="M:PayrollEngine.PayrunJobStatusExtensions.IsFinal(PayrollEngine.PayrunJobStatus)">
            <summary>Test if the payrun job is in a final state</summary>
            <param name="jobStatus">The payrun job status</param>
            <returns>True, if the state is a final state</returns>
        </member>
        <member name="M:PayrollEngine.PayrunJobStatusExtensions.IsWebhookProcessChange(PayrollEngine.PayrunJobStatus,PayrollEngine.PayrunJobStatus)">
            <summary>Test if the payrun job state change is handled by the webhook start message, change from final to transmit</summary>
            <param name="oldJobStatus">The source payrun job status</param>
            <param name="newJobStatus">The target payrun job status</param>
            <returns>True, if the state is a final state</returns>
        </member>
        <member name="M:PayrollEngine.PayrunJobStatusExtensions.IsWebhookFinishChange(PayrollEngine.PayrunJobStatus,PayrollEngine.PayrunJobStatus)">
            <summary>Test if the payrun job state change is handled by the webhook finished message,
            change from process to complete or failed/// </summary>
            <param name="oldJobStatus">The source payrun job status</param>
            <param name="newJobStatus">The target payrun job status</param>
            <returns>True, if the state is a final state</returns>
        </member>
        <member name="M:PayrollEngine.PayrunJobStatusExtensions.IsValidStateChange(PayrollEngine.PayrunJobStatus,PayrollEngine.PayrunJobStatus)">
            <summary> Test if the state change is valid.
            Supported state changes:
            - *: Draft | Forecast | Abort
            - Draft: Release | Abort
            - Release: Process | Abort
            - Process: Complete | Cancel</summary>
            <param name="oldJobStatus">The source payrun job status</param>
            <param name="newJobStatus">The target payrun job status</param>
            <returns>True, if the state change is valid</returns>
        </member>
        <member name="T:PayrollEngine.PersistenceErrorType">
            <summary>Persistence error type</summary>
        </member>
        <member name="F:PayrollEngine.PersistenceErrorType.UniqueConstraint">
            <summary>Unique constraint error</summary>
        </member>
        <member name="T:PayrollEngine.PersistenceException">
            <summary>Persistence exception</summary>
        </member>
        <member name="P:PayrollEngine.PersistenceException.ErrorType">
            <summary>The error number</summary>
        </member>
        <member name="M:PayrollEngine.PersistenceException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.PersistenceException.#ctor(System.String,PayrollEngine.PersistenceErrorType)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.PersistenceException.#ctor(System.String,PayrollEngine.PersistenceErrorType,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.PersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.ProgramConfiguration`1">
            <summary>Access to the program configuration</summary>
        </member>
        <member name="P:PayrollEngine.ProgramConfiguration`1.Configuration">
            <summary>Gets the configuration root</summary>
        </member>
        <member name="M:PayrollEngine.ProgramConfiguration`1.#ctor(PayrollEngine.ProgramConfigurationOptions)">
            <summary>Initializes a new instance of the <see cref="T:PayrollEngine.ProgramConfiguration`1"/> class</summary>
        </member>
        <member name="M:PayrollEngine.ProgramConfiguration`1.Get(System.String)">
            <summary>Gets the application setting by key</summary>
            <param name="key">The configuration key</param>
            <returns>The configuration value</returns>
        </member>
        <member name="M:PayrollEngine.ProgramConfiguration`1.Get(System.String,System.String)">
            <summary>Gets the application setting by key</summary>
            <param name="key">The configuration key</param>
            <param name="defaultValue">The default value</param>
            <returns>The configuration value</returns>
        </member>
        <member name="M:PayrollEngine.ProgramConfiguration`1.GetConfiguration``1">
            <summary>Gets the application setting object by type name</summary>
            <returns>The configuration object</returns>
        </member>
        <member name="M:PayrollEngine.ProgramConfiguration`1.GetConfiguration``1(System.String)">
            <summary>Gets the application setting object by key</summary>
            <param name="key">The object key name</param>
            <returns>The configuration object</returns>
        </member>
        <member name="M:PayrollEngine.ProgramConfiguration`1.GetConnectionString(System.String)">
            <summary>Get connection string</summary>
            <param name="name">The connection string key</param>
            <returns>The connection string</returns>
        </member>
        <member name="T:PayrollEngine.ProgramConfigurationOptions">
            <summary>Program configuration options</summary>
        </member>
        <member name="F:PayrollEngine.ProgramConfigurationOptions.Default">
            <summary>Default configuration</summary>
        </member>
        <member name="F:PayrollEngine.ProgramConfigurationOptions.AppSettings">
            <summary>Use json configuration file appsettings.json</summary>
        </member>
        <member name="F:PayrollEngine.ProgramConfigurationOptions.UserSecrets">
            <summary>Enable user secrets</summary>
        </member>
        <member name="T:PayrollEngine.PropertyValue">
            <summary>
            Property with value
            </summary>
        </member>
        <member name="P:PayrollEngine.PropertyValue.Property">
            <summary>
            The property
            </summary>
        </member>
        <member name="P:PayrollEngine.PropertyValue.Value">
            <summary>
            The property value
            </summary>
        </member>
        <member name="P:PayrollEngine.PropertyValue.DictionaryKey">
            <summary>
            The dictionary key
            </summary>
        </member>
        <member name="T:PayrollEngine.Query">
            <summary>
            Object query parameters
            </summary>
        </member>
        <member name="P:PayrollEngine.Query.Status">
            <summary>
            The object status (default: all status)
            </summary>
        </member>
        <member name="P:PayrollEngine.Query.Filter">
            <summary>
            The OData filter expression (with support for attribute fields)
            </summary>
        </member>
        <member name="P:PayrollEngine.Query.OrderBy">
            <summary>
            The OData order-by expression (with support for attribute fields)
            </summary>
        </member>
        <member name="P:PayrollEngine.Query.Select">
            <summary>
            The OData field selection expression
            </summary>
        </member>
        <member name="P:PayrollEngine.Query.Top">
            <summary>
            The number of items in the queried collection
            </summary>
        </member>
        <member name="P:PayrollEngine.Query.Skip">
            <summary>
            The number of items in the queried collection that are to be skipped
            </summary>
        </member>
        <member name="P:PayrollEngine.Query.Result">
            <summary>
            The query result type: items, count or items with count (default: result items)
            </summary>
        </member>
        <member name="M:PayrollEngine.Query.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PayrollEngine.Query.#ctor(PayrollEngine.Query)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The copy source</param>
        </member>
        <member name="M:PayrollEngine.Query.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:PayrollEngine.QueryException">
            <summary>Query exception</summary>
        </member>
        <member name="M:PayrollEngine.QueryException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.QueryException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.QueryException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.QueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:PayrollEngine.QueryExtensions">
            <summary>Extension methods for <see cref="T:System.Uri"/> </summary>
        </member>
        <member name="M:PayrollEngine.QueryExtensions.HasStatus(PayrollEngine.Query)">
            <summary>Test if query contains a status</summary>
            <param name="query">The query to append</param>
            <returns>True if status is defined</returns>
        </member>
        <member name="M:PayrollEngine.QueryExtensions.HasFilter(PayrollEngine.Query)">
            <summary>Test if query contains a filter</summary>
            <param name="query">The query to append</param>
            <returns>True if filter is defined</returns>
        </member>
        <member name="M:PayrollEngine.QueryExtensions.HasOrderBy(PayrollEngine.Query)">
            <summary>Test if query contains an order by</summary>
            <param name="query">The query to append</param>
            <returns>True if order by is defined</returns>
        </member>
        <member name="M:PayrollEngine.QueryExtensions.HasSelect(PayrollEngine.Query)">
            <summary>Test if query contains a select</summary>
            <param name="query">The query to append</param>
            <returns>True if select is defined</returns>
        </member>
        <member name="M:PayrollEngine.QueryExtensions.HasTop(PayrollEngine.Query)">
            <summary>Test if query contains a top</summary>
            <param name="query">The query to append</param>
            <returns>True if top is defined</returns>
        </member>
        <member name="M:PayrollEngine.QueryExtensions.HasSkip(PayrollEngine.Query)">
            <summary>Test if query contains a skip</summary>
            <param name="query">The query to append</param>
            <returns>True if skip is defined</returns>
        </member>
        <member name="M:PayrollEngine.QueryExtensions.HasResult(PayrollEngine.Query)">
            <summary>Test if query contains a result</summary>
            <param name="query">The query to append</param>
            <returns>True if result is defined</returns>
        </member>
        <member name="M:PayrollEngine.QueryExtensions.AppendQueryString(PayrollEngine.Query,System.String)">
            <summary>Append the given object query key and value to the URI</summary>
            <param name="query">The query to append</param>
            <param name="uri">The base URI</param>
            <returns>The combined result</returns>
        </member>
        <member name="T:PayrollEngine.QueryFactory">
            <summary>
            Factory for queries
            </summary>
        </member>
        <member name="P:PayrollEngine.QueryFactory.Active">
            <summary>
            Active objects query
            </summary>
        </member>
        <member name="P:PayrollEngine.QueryFactory.Inactive">
            <summary>
            Inactive objects query
            </summary>
        </member>
        <member name="M:PayrollEngine.QueryFactory.NewEqualFilterQuery(System.String,System.Object)">
            <summary>
            New filter query with one equals condition
            </summary>
            <param name="column">The column name</param>
            <param name="value">The filter value</param>
            <returns>New equals filter query</returns>
        </member>
        <member name="M:PayrollEngine.QueryFactory.NewEqualsFilterQuery(System.String,System.Object,System.String,System.Object)">
            <summary>
            New filter query with two equals conditions
            </summary>
            <param name="column1">The first column name</param>
            <param name="value1">The first filter value</param>
            <param name="column2">The second column name</param>
            <param name="value2">The second filter value</param>
            <returns>New equals filter query</returns>
        </member>
        <member name="M:PayrollEngine.QueryFactory.NewEqualFilterQuery(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            New filter query with multiple equals conditions
            </summary>
            <param name="values">The values by column name</param>
            <returns>New equals filter query</returns>
        </member>
        <member name="M:PayrollEngine.QueryFactory.NewIdQuery(System.Int32)">
            <summary>
            New query width the object id filter
            </summary>
            <param name="id">The object id</param>
            <returns>New identifier query</returns>
        </member>
        <member name="M:PayrollEngine.QueryFactory.NewIdentifierQuery(System.String)">
            <summary>
            New query width an identifier filter
            </summary>
            <param name="identifier">The identifier</param>
            <returns>New identifier query</returns>
        </member>
        <member name="M:PayrollEngine.QueryFactory.NewNameQuery(System.String)">
            <summary>
            New query width a name filter
            </summary>
            <param name="name">The identifier</param>
            <returns>New name query</returns>
        </member>
        <member name="T:PayrollEngine.QueryResult`1">
            <summary>
            Query result
            </summary>
        </member>
        <member name="M:PayrollEngine.QueryResult`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.QueryResult`1"/> class
            </summary>
        </member>
        <member name="M:PayrollEngine.QueryResult`1.#ctor(`0[],System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:PayrollEngine.QueryResult`1"/> class
            </summary>
            <param name="items">The query result items</param>
            <param name="count">The query result count</param>
        </member>
        <member name="P:PayrollEngine.QueryResult`1.Count">
            <summary>
            The query result count
            </summary>
        </member>
        <member name="P:PayrollEngine.QueryResult`1.Items">
            <summary>
            The query result items
            </summary>
        </member>
        <member name="M:PayrollEngine.QueryResult`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance</returns>
        </member>
        <member name="T:PayrollEngine.QueryResultType">
            <summary>The query result type</summary>
        </member>
        <member name="F:PayrollEngine.QueryResultType.Items">
            <summary>Items only</summary>
        </member>
        <member name="F:PayrollEngine.QueryResultType.Count">
            <summary>Count only</summary>
        </member>
        <member name="F:PayrollEngine.QueryResultType.ItemsWithCount">
            <summary>Items and count</summary>
        </member>
        <member name="T:PayrollEngine.QuerySpecification">
            <summary>The script specification</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.StatusOperation">
            <summary>Status</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.OrderByOperation">
            <summary>Order by</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.OrderByAscending">
            <summary>Order by ascending</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.OrderByDescending">
            <summary>Order by descending</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.FilterOperation">
            <summary>Filter</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.SelectOperation">
            <summary>Select</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.TopOperation">
            <summary>Top</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.SkipOperation">
            <summary>Skip</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.EqualsFilter">
            <summary>Equals filter</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.NotEqualsFilter">
            <summary>Not equals filter</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.GreaterFilter">
            <summary>Greater filter</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.GreaterEqualsFilter">
            <summary>Greater equals filter</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.LessFilter">
            <summary>Less filter</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.LessEqualsFilter">
            <summary>Less equals filter</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.ResultOperation">
            <summary>Result operation</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.ContainsFunction">
            <summary>Contains function</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.NotContainsFunction">
            <summary>Not contains function</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.EndsWithFunction">
            <summary>Ends with function</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.StartsWithFunction">
            <summary>Starts with function</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.YearFunction">
            <summary>Year function</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.MonthFunction">
            <summary>Month function</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.DayFunction">
            <summary>Day function</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.HourFunction">
            <summary>Hour function</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.MinuteFunction">
            <summary>Minute function</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.DateFunction">
            <summary>Date function</summary>
        </member>
        <member name="F:PayrollEngine.QuerySpecification.TimeFunction">
            <summary>Time function</summary>
        </member>
        <member name="T:PayrollEngine.ReportAttributeMode">
            <summary>The case result kind</summary>
        </member>
        <member name="F:PayrollEngine.ReportAttributeMode.Json">
            <summary>Attributes as JSON</summary>
        </member>
        <member name="F:PayrollEngine.ReportAttributeMode.Table">
            <summary>Attributes as Table</summary>
        </member>
        <member name="T:PayrollEngine.ReportParameterType">
            <summary>The report value types</summary>
        </member>
        <member name="F:PayrollEngine.ReportParameterType.Value">
            <summary>Custom value</summary>
        </member>
        <member name="F:PayrollEngine.ReportParameterType.Now">
            <summary>The current date and time</summary>
        </member>
        <member name="F:PayrollEngine.ReportParameterType.Today">
            <summary>The current day</summary>
        </member>
        <member name="F:PayrollEngine.ReportParameterType.TenantId">
            <summary>Tenant id</summary>
        </member>
        <member name="F:PayrollEngine.ReportParameterType.UserId">
            <summary>User id</summary>
        </member>
        <member name="F:PayrollEngine.ReportParameterType.EmployeeId">
            <summary>Employee id or identifier</summary>
        </member>
        <member name="F:PayrollEngine.ReportParameterType.RegulationId">
            <summary>Regulation id or name</summary>
        </member>
        <member name="F:PayrollEngine.ReportParameterType.PayrollId">
            <summary>Payroll id or name</summary>
        </member>
        <member name="F:PayrollEngine.ReportParameterType.PayrunId">
            <summary>Payrun id or name</summary>
        </member>
        <member name="F:PayrollEngine.ReportParameterType.ReportId">
            <summary>Report id or name</summary>
        </member>
        <member name="F:PayrollEngine.ReportParameterType.WebhookId">
            <summary>Webhook id or name</summary>
        </member>
        <member name="T:PayrollEngine.ResultKind">
            <summary>The case result kind</summary>
        </member>
        <member name="F:PayrollEngine.ResultKind.Collector">
            <summary>Collector result</summary>
        </member>
        <member name="F:PayrollEngine.ResultKind.CollectorCustom">
            <summary>Collector custom result</summary>
        </member>
        <member name="F:PayrollEngine.ResultKind.WageType">
            <summary>Wage type result</summary>
        </member>
        <member name="F:PayrollEngine.ResultKind.WageTypeCustom">
            <summary>Wage type custom result</summary>
        </member>
        <member name="F:PayrollEngine.ResultKind.Payrun">
            <summary>Payrun result</summary>
        </member>
        <member name="T:PayrollEngine.RetroPayMode">
            <summary>The payrun retro pay mode</summary>
        </member>
        <member name="F:PayrollEngine.RetroPayMode.None">
            <summary>No retro pay calculation</summary>
        </member>
        <member name="F:PayrollEngine.RetroPayMode.ValueChange">
            <summary>Retro pay calculation starting from the period containing the oldest value change (start date)</summary>
        </member>
        <member name="T:PayrollEngine.RetroTimeType">
            <summary>The payrun retro type</summary>
        </member>
        <member name="F:PayrollEngine.RetroTimeType.Anytime">
            <summary>Retro calculation without time limits</summary>
        </member>
        <member name="F:PayrollEngine.RetroTimeType.Cycle">
            <summary>Retro calculation within the current cycle</summary>
        </member>
        <member name="T:PayrollEngine.ScriptingSpecification">
            <summary>The script specification</summary>
        </member>
        <member name="F:PayrollEngine.ScriptingSpecification.ScriptingVersion">
            <summary>The current scripting version</summary>
        </member>
        <member name="F:PayrollEngine.ScriptingSpecification.CSharpLanguageVersion">
            <summary>The c# language version, string represents the Microsoft.CodeAnalysis.CSharp.LanguageVersion enum</summary>
        </member>
        <member name="F:PayrollEngine.ScriptingSpecification.TagsStartMarker">
            <summary>Tags start marker</summary>
        </member>
        <member name="F:PayrollEngine.ScriptingSpecification.TagsEndMarker">
            <summary>Tags end marker</summary>
        </member>
        <member name="F:PayrollEngine.ScriptingSpecification.TagsSeparator">
            <summary>Tags separator</summary>
        </member>
        <member name="F:PayrollEngine.ScriptingSpecification.SealedTag">
            <summary>Sealed (non-derivable) tag</summary>
        </member>
        <member name="F:PayrollEngine.ScriptingSpecification.FunctionRegion">
            <summary>Scripting region for the function</summary>
        </member>
        <member name="M:PayrollEngine.ScriptingSpecification.IsTag(System.String)">
            <summary>Test if the tag is known</summary>
            <param name="tag">The tag to test</param>
            <returns>True id the tag is known</returns>
        </member>
        <member name="T:PayrollEngine.Serialization.CsvSerializer">
            <summary>CSV serializer from/to file, stream and reader</summary>
            <remarks>
            source: https://github.com/jcoehoorn/EasyCSV
            </remarks>
        </member>
        <member name="M:PayrollEngine.Serialization.CsvSerializer.ToFile(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.String}},System.Text.Encoding,System.Char)">
            <summary>Write CSV to file</summary>
            <param name="fileName">The file name</param>
            <param name="rows">The CSV rows</param>
            <param name="encoding">The encoding (default: UTF8)</param>
            <param name="columnSeparator">The default column separator (default: ,)</param>
        </member>
        <member name="M:PayrollEngine.Serialization.CsvSerializer.FromFile(System.String,System.Text.Encoding,System.Boolean,System.Char)">
            <summary>Get CSV from file</summary>
            <param name="fileName">The file name</param>
            <param name="encoding">The encoding (default: UTF8)</param>
            <param name="ignoreFirstLine">Ignore the header line (default: false)</param>
            <param name="columnSeparator">The default column separator (default: ,)</param>
            <returns>The CSV string list</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.CsvSerializer.FromStream(System.IO.Stream,System.Boolean,System.Char)">
            <summary>Get CSV from stream</summary>
            <param name="stream">The stream</param>
            <param name="ignoreFirstLine">Ignore the header line (default: false)</param>
            <param name="columnSeparator">The default column separator (default: ,)</param>
            <returns>The CSV string list</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.CsvSerializer.FromReaderAsync(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>Get CSV from stream</summary>
            <param name="reader">The reader</param>
            <param name="ignoreFirstLine">Ignore the header line (default: false)</param>
            <param name="columnSeparator">The default column separator (default: ,)</param>
            <returns>The CSV string list</returns>
        </member>
        <member name="T:PayrollEngine.Serialization.DefaultJsonSerializer">
            <summary>Default JSON serializer</summary>
        </member>
        <member name="M:PayrollEngine.Serialization.DefaultJsonSerializer.Deserialize``1(System.String)">
            <summary>Deserialize object using the default options</summary>
            <param name="json">The JSON text</param>
            <typeparam name="T">The object type</typeparam>
            <returns>Object of type T</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.DefaultJsonSerializer.Serialize``1(``0)">
            <summary>Serialize object using the default options</summary>
            <param name="obj">The object to serialize</param>
            <typeparam name="T">The object type</typeparam>
            <returns>The serialized JSON text</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.DefaultJsonSerializer.SerializeJson``1(``0)">
            <summary>Serialize object to string content using the default options</summary>
            <param name="obj">The object to serialize</param>
            <typeparam name="T">The object type</typeparam>
            <returns>The string content</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.DefaultJsonSerializer.SerializeJson(System.Object)">
            <summary>
            Serialize object to string content using the default options
            </summary>
            <param name="obj">The object to serialize</param>
            <returns>The string content</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.DefaultJsonSerializer.SerializeJson(System.String)">
            <summary>Serialize object to string content using the default options</summary>
            <param name="json">The JSON text</param>
            <returns>The string content</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.DefaultJsonSerializer.DefaultValueModifier(System.Text.Json.Serialization.Metadata.JsonTypeInfo)">
            <summary>
            Suppress empty collections
            </summary>
            <remarks>see https://stackoverflow.com/a/73777873/15659039</remarks>
            <param name="typeInfo"></param>
        </member>
        <member name="T:PayrollEngine.Serialization.JsonSerializer">
            <summary>Extensions for System.Text.Json.JsonSerializer</summary>
        </member>
        <member name="M:PayrollEngine.Serialization.JsonSerializer.SerializeList``1(System.Collections.Generic.IList{``0})">
            <summary>Serialize object list</summary>
            <param name="value">The list</param>
            <returns>String representation of the list, null on undefined/empty list</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.JsonSerializer.DeserializeList``1(System.String)">
            <summary>Deserialize a json to an object list/// </summary>
            <param name="json">The json to deserialize</param>
            <returns>Deserialized list, null on undefined/empty list</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.JsonSerializer.SerializeNamedDictionary``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>Prevent 'null' serialization of empty dictionaries</summary>
            <param name="values">The dictionary to serialize</param>
            <returns>String representation of the dictionary, null on undefined or empty dictionary</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.JsonSerializer.DeserializeNamedDictionary``1(System.String)">
            <summary>Serialize a string/object dictionary.
            replace MS JsonSerializer.Deserialize&lt;Dictionary&lt;string,object&gt;&gt;()
            it deserializes the json { "myKey": 86 } into the dictionary item
            key: myKey
            value: ValueKind = Number : "86"
            and not
            key: myKey
            value: 86
            See also https://github.com/dotnet/runtime/issues/30524#issuecomment-539704342
            </summary>
            <param name="json">The json string to deserialize</param>
            <returns>Deserialized dictionary, null on undefined or empty dictionary</returns>
        </member>
        <member name="T:PayrollEngine.Serialization.NamedDictionaryConverter">
            <summary>JSON converter for <see cref="T:System.Collections.Generic.Dictionary`2"/></summary>
        </member>
        <member name="M:PayrollEngine.Serialization.NamedDictionaryConverter.CanConvert(System.Type)">
            <summary>Determines whether the type can be converted</summary>
            <param name="typeToConvert">The type is checked as to whether it can be converted</param>
            <returns>True if the type can be converted</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.NamedDictionaryConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Create a converter for the provided <see cref="T:System.Type"/></summary>
            <param name="typeToConvert">The <see cref="T:System.Type"/> being converted</param>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> being used</param>
            <returns>An instance of a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> where T is compatible with <paramref name="typeToConvert"/></returns>
        </member>
        <member name="T:PayrollEngine.Serialization.NamedDictionaryConverterType`2">
            <summary>
            Named dictionary inner converter type
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:PayrollEngine.Serialization.NamedDictionaryConverterType`2.#ctor(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Serializer constructor
            </summary>
            <param name="options">The serializer options</param>
        </member>
        <member name="M:PayrollEngine.Serialization.NamedDictionaryConverterType`2.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read named dictionary
            </summary>
            <param name="reader">The json reader</param>
            <param name="typeToConvert">The type to convert</param>
            <param name="options">The deserialization options</param>
            <returns>The named dictionary</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.NamedDictionaryConverterType`2.Write(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.Dictionary{`0,`1},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write named dictionary
            </summary>
            <param name="writer">The json writer</param>
            <param name="values">The named dictionary to write</param>
            <param name="options">The deserialization options</param>
        </member>
        <member name="T:PayrollEngine.Serialization.StringNullableEnumConverter`1">
            <summary>JSON converter for nullable enums.
            See https://stackoverflow.com/questions/59379896/does-jsonstringenumconverter-system-text-json-support-null-values
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PayrollEngine.Serialization.StringNullableEnumConverter`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Serialization.StringNullableEnumConverter`1.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PayrollEngine.Serialization.StringNullableEnumConverter`1.CanConvert(System.Type)">
            <summary>Determines whether the type can be converted</summary>
            <param name="typeToConvert">The type is checked as to whether it can be converted</param>
            <returns>True if the type can be converted</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.StringNullableEnumConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Read and convert the JSON to T</summary>
            <remarks>A converter may throw any Exception, but should throw <cref>JsonException</cref> when the JSON is invalid</remarks>
            <param name="reader">The <see cref="T:System.Text.Json.Utf8JsonReader"/> to read from</param>
            <param name="typeToConvert">The <see cref="T:System.Type"/> being converted</param>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> being used</param>
            <returns>The value that was converted</returns>
        </member>
        <member name="M:PayrollEngine.Serialization.StringNullableEnumConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>Write the value as JSON</summary>
            <remarks>A converter may throw any Exception, but should throw <cref>JsonException</cref> when the JSON cannot be created</remarks>
            <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter"/> to write to</param>
            <param name="value">The value to convert</param>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> being used</param>
        </member>
        <member name="T:PayrollEngine.SortDirection">
            <summary>Specifies the direction in which to sort a list of items</summary>
        </member>
        <member name="F:PayrollEngine.SortDirection.Ascending">
            <summary>Sort from smallest to largest. For example, from A to Z</summary>
        </member>
        <member name="F:PayrollEngine.SortDirection.Descending">
            <summary>Sort from largest to smallest. For example, from Z to A</summary>
        </member>
        <member name="T:PayrollEngine.StreamExtensions">
            <summary>Stream extension methods</summary>
        </member>
        <member name="M:PayrollEngine.StreamExtensions.WriteToFile(System.IO.MemoryStream,System.String)">
            <summary>Get configuration object by type name</summary>
            <param name="stream">The memory stream</param>
            <param name="targetFileName">The target file name</param>
            <remarks>Existing file will be deleted</remarks>
            <returns>The configuration object</returns>
        </member>
        <member name="T:PayrollEngine.StringAttributeExtensions">
            <summary>Attribute extensions for <see cref="T:System.String"/></summary>
        </member>
        <member name="M:PayrollEngine.StringAttributeExtensions.IsTextAttributeField(System.String)">
            <summary>Test for text attribute field name</summary>
            <param name="attribute">The attribute</param>
            <returns>True for a text attribute field</returns>
        </member>
        <member name="M:PayrollEngine.StringAttributeExtensions.ToTextAttributeField(System.String)">
            <summary>To text attribute field name</summary>
            <param name="attribute">The attribute</param>
            <returns>Text attribute name</returns>
        </member>
        <member name="M:PayrollEngine.StringAttributeExtensions.IsDateAttributeField(System.String)">
            <summary>Test for text attribute field name</summary>
            <param name="attribute">The attribute</param>
            <returns>True for a date attribute field</returns>
        </member>
        <member name="M:PayrollEngine.StringAttributeExtensions.ToDateAttributeField(System.String)">
            <summary>To date attribute field name</summary>
            <param name="attribute">The attribute</param>
            <returns>Date attribute name</returns>
        </member>
        <member name="M:PayrollEngine.StringAttributeExtensions.IsNumericAttributeField(System.String)">
            <summary>Test for numeric attribute field name</summary>
            <param name="attribute">The attribute</param>
            <returns>True for a numeric attribute field</returns>
        </member>
        <member name="M:PayrollEngine.StringAttributeExtensions.ToNumericAttributeField(System.String)">
            <summary>To numeric attribute field name</summary>
            <param name="attribute">The attribute</param>
            <returns>String starting uppercase</returns>
        </member>
        <member name="M:PayrollEngine.StringAttributeExtensions.RemoveAttributePrefix(System.String)">
            <summary>Remove the attribute field name prefix</summary>
            <param name="attribute">The attribute</param>
            <returns>Attribute name without prefix</returns>
        </member>
        <member name="T:PayrollEngine.StringConvertExtensions">
            <summary>Convert extensions for <see cref="T:System.String"/></summary>
        </member>
        <member name="F:PayrollEngine.StringConvertExtensions.RelatedCaseSeparator">
            <summary>The related case separator</summary>
        </member>
        <member name="F:PayrollEngine.StringConvertExtensions.CaseFieldSlotSeparator">
            <summary>The case field slot separator</summary>
        </member>
        <member name="M:PayrollEngine.StringConvertExtensions.ReferenceToRelatedCases(System.String)">
            <summary>Extract related cases from a case relation string, format is 'sourceCaseName:targetCaseName'</summary>
            <param name="reference">The case relation reference</param>
            <returns>The related cases a tuple: item1=source case, item2=target case</returns>
        </member>
        <member name="M:PayrollEngine.StringConvertExtensions.RelatedCasesToReference(System.String,System.String)">
            <summary>Build related case reference string, format is 'sourceCaseName:targetCaseName'</summary>
            <param name="sourceCaseName">The source case name</param>
            <param name="targetCaseName">The target case name</param>
            <returns>The related cases reference</returns>
        </member>
        <member name="M:PayrollEngine.StringConvertExtensions.ReferenceToCaseFieldSlot(System.String)">
            <summary>Extract case field name and slot form string, format is 'caseName:slotName'</summary>
            <param name="reference">The case field slot reference</param>
            <returns>The case field slot reference a tuple: item1=case name, item2=slot name</returns>
        </member>
        <member name="M:PayrollEngine.StringConvertExtensions.CaseFieldSlotToReference(System.String,System.String)">
            <summary>Build case field slot reference string, format is 'caseName:slotName'</summary>
            <param name="caseName">The case name</param>
            <param name="slotName">The case slot name</param>
            <returns>The case field slot reference</returns>
        </member>
        <member name="T:PayrollEngine.StringExtensions">
            <summary>Extensions for <see cref="T:System.String"/></summary>
        </member>
        <member name="M:PayrollEngine.StringExtensions.FirstCharacterToLower(System.String)">
            <summary>Ensures first string character is lower</summary>
            <param name="value">The string value</param>
            <returns>String starting lowercase</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.FirstCharacterToUpper(System.String)">
            <summary>Ensures first string character is upper</summary>
            <param name="value">The string value</param>
            <returns>String starting uppercase</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.EnsureStart(System.String,System.String)">
            <summary>Ensures a start prefix</summary>
            <param name="source">The source value</param>
            <param name="prefix">The prefix to add</param>
            <returns>The string with prefix</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.EnsureStart(System.String,System.String,System.StringComparison)">
            <summary>Ensures a start prefix</summary>
            <param name="source">The source value</param>
            <param name="prefix">The prefix to add</param>
            <param name="comparison">The comparison culture</param>
            <returns>The string with prefix</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.EnsureEnd(System.String,System.String)">
            <summary>Ensures an ending suffix</summary>
            <param name="source">The source value</param>
            <param name="suffix">The suffix to add</param>
            <returns>The string with suffix</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.EnsureEnd(System.String,System.String,System.StringComparison)">
            <summary>Ensures an ending suffix</summary>
            <param name="source">The source value</param>
            <param name="suffix">The suffix to add</param>
            <param name="comparison">The comparison culture</param>
            <returns>The string with suffix</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.RemoveFromStart(System.String,System.String)">
            <summary>Remove prefix from string</summary>
            <param name="source">The source value</param>
            <param name="prefix">The prefix to remove</param>
            <returns>The string without suffix</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.RemoveFromStart(System.String,System.String,System.StringComparison)">
            <summary>Remove prefix from string</summary>
            <param name="source">The source value</param>
            <param name="prefix">The prefix to remove</param>
            <param name="comparison">The comparison culture</param>
            <returns>The string without the starting prefix</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.RemoveFromEnd(System.String,System.String)">
            <summary>Remove suffix from string</summary>
            <param name="source">The source value</param>
            <param name="suffix">The suffix to remove</param>
            <returns>The string without the ending suffix</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.RemoveFromEnd(System.String,System.String,System.StringComparison)">
            <summary>Remove suffix from string</summary>
            <param name="source">The source value</param>
            <param name="suffix">The suffix to remove</param>
            <param name="comparison">The comparison culture</param>
            <returns>The string without the ending suffix</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.RemoveSpecialCharacters(System.String)">
            <summary>Remove all special characters</summary>
            <param name="source">The source value</param>
            <returns>The source value without special characters</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.ToCamelSentence(System.String,PayrollEngine.CharacterCase,System.String)">
            <summary>Change to camel case sentence</summary>
            <param name="source">The source value</param>
            <param name="wordCase">The word start character casing</param>
            <param name="separator">The word separator</param>
            <returns>Camel case text sentence</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.ToPascalSentence(System.String,PayrollEngine.CharacterCase,System.String)">
            <summary>Change to pascal case sentence</summary>
            <param name="source">The source value</param>
            <param name="wordCase">The word start character casing</param>
            <param name="separator">The word separator</param>
            <returns>Camel case text sentence</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.ToSentence(System.String,PayrollEngine.CharacterCase,PayrollEngine.CharacterCase,System.String)">
            <summary>Change text sentence</summary>
            <remarks>source: https://stackoverflow.com/a/51310790/15659039 </remarks>
            <param name="source">The source value</param>
            <param name="startCase">The first character casing</param>
            <param name="wordCase">The word start character casing</param>
            <param name="separator">The word separator</param>
            <returns></returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.TruncateSentence(System.String,System.Int32)">
            <summary>Truncate a string, preserving the sentence words</summary>
            <param name="source">The source value</param>
            <param name="length">The string length</param>
            <returns>Truncated case text sentence</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.TruncateSentence(System.String,System.Int32,System.String)">
            <summary>Truncate a string, preserving the sentence words</summary>
            <param name="source">The source value</param>
            <param name="length">The string length</param>
            <param name="ellipsis">Replacement for cut text</param>
            <remarks>source https://stackoverflow.com/a/53843505/15659039</remarks>
            <returns>Truncated case text sentence</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.HtmlEncode(System.String)">
            <summary>Encode string to html, single quotation marks and double quotation marks are included as \' and \"</summary>
            <param name="value">The string value</param>
            <returns>Encoded Html value</returns>
        </member>
        <member name="M:PayrollEngine.StringExtensions.HtmlDecode(System.String)">
            <summary>Encode string to html, single quotation marks and double quotation marks are included as \' and \"</summary>
            <param name="value">The string value</param>
            <returns>Encoded Html value</returns>
        </member>
        <member name="T:PayrollEngine.StringHashExtensions">
            <summary>Hash extensions for <see cref="T:System.String"/></summary>
        </member>
        <member name="M:PayrollEngine.StringHashExtensions.ToPayrollHash(System.String,System.Nullable{System.Decimal})">
            <summary>Get the payroll lookup hash code, combined by key and range value
            See https://andrewlock.net/why-is-string-gethashcode-different-each-time-i-run-my-program-in-net-core/
            </summary>
            <param name="source">The source value</param>
            <param name="rangeValue">The range value(lookup)</param>
            <returns>The value key hash code, zero on value or range value</returns>
        </member>
        <member name="M:PayrollEngine.StringHashExtensions.ToPayrollHash(System.String)">
            <summary>Get the lookup key hash code</summary>
            <param name="source">The source value</param>
            <returns>The value key hash code, zero on empty value</returns>
        </member>
        <member name="T:PayrollEngine.StringJsonExtensions">
            <summary>Json extensions for <see cref="T:System.String"/></summary>
        </member>
        <member name="M:PayrollEngine.StringJsonExtensions.IsJson(System.String)">
            <summary>Test if the string is a json array or object</summary>
            <param name="value">The string value</param>
            <returns>True if the string represents a json array or object</returns>
        </member>
        <member name="M:PayrollEngine.StringJsonExtensions.IsJsonArray(System.String)">
            <summary>Test if the string is a json array</summary>
            <param name="value">The string value</param>
            <returns>True if the string represents a json array</returns>
        </member>
        <member name="M:PayrollEngine.StringJsonExtensions.IsJsonObject(System.String)">
            <summary>Test if the string is a json object</summary>
            <param name="value">The string value</param>
            <returns>True if the string represents a json object</returns>
        </member>
        <member name="M:PayrollEngine.StringJsonExtensions.JsonToValue(System.String,PayrollEngine.ValueType)">
            <summary>Convert a string to case value</summary>
            <param name="value">The string to convert</param>
            <param name="valueType">Target type</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:PayrollEngine.StringJsonExtensions.JsonToInteger(System.String)">
            <summary>Converts a json string to an integer value</summary>
            <param name="json">The json representation</param>
            <returns>The integer value</returns>
        </member>
        <member name="M:PayrollEngine.StringJsonExtensions.JsonToDecimal(System.String)">
            <summary>Converts a json string to an decimal value</summary>
            <param name="json">The json representation</param>
            <returns>The decimal value</returns>
        </member>
        <member name="M:PayrollEngine.StringJsonExtensions.JsonToString(System.String)">
            <summary>Converts a json string to a string value</summary>
            <param name="json">The json representation</param>
            <returns>The string value</returns>
        </member>
        <member name="M:PayrollEngine.StringJsonExtensions.JsonToDateTime(System.String)">
            <summary>Converts a json string to a date value</summary>
            <param name="json">The json representation</param>
            <returns>The date value</returns>
        </member>
        <member name="M:PayrollEngine.StringJsonExtensions.JsonToBoolean(System.String)">
            <summary>Converts a json string to a boolean value</summary>
            <param name="json">The json representation</param>
            <returns>The boolean value</returns>
        </member>
        <member name="M:PayrollEngine.StringJsonExtensions.JsonPrettify(System.String)">
            <summary>Prettify json string</summary>
            <param name="json">The json representation</param>
            <returns>Indented json representation</returns>
        </member>
        <member name="T:PayrollEngine.SystemSpecification">
            <summary>The system specification</summary>
        </member>
        <member name="F:PayrollEngine.SystemSpecification.ApplicationName">
            <summary>Application name, use to mark the application/producer in office documents</summary>
        </member>
        <member name="F:PayrollEngine.SystemSpecification.DatabaseConnectionString">
            <summary>Environment variable name, containing the Payroll database connection string</summary>
        </member>
        <member name="F:PayrollEngine.SystemSpecification.TextAttributePrefix">
            <summary>Prefix for text attribute fields</summary>
        </member>
        <member name="F:PayrollEngine.SystemSpecification.DateAttributePrefix">
            <summary>Prefix for date attribute fields</summary>
        </member>
        <member name="F:PayrollEngine.SystemSpecification.NumericAttributePrefix">
            <summary>Prefix for numeric attribute fields</summary>
        </member>
        <member name="F:PayrollEngine.SystemSpecification.DecimalPrecision">
            <summary>Precision for decimal values, precision of 28 uses 13 bytes of storage.
            See https://docs.microsoft.com/en-us/sql/t-sql/data-types/decimal-and-numeric-transact-sql
            </summary>
        </member>
        <member name="F:PayrollEngine.SystemSpecification.DecimalScale">
            <summary>Scale for decimal values</summary>
        </member>
        <member name="F:PayrollEngine.SystemSpecification.DateTimeFractionalSecondsPrecision">
            <summary>Datetime precision</summary>
        </member>
        <member name="F:PayrollEngine.SystemSpecification.PayrunMaxExecutionCount">
            <summary>Payrun executions</summary>
        </member>
        <member name="T:PayrollEngine.TimeSpanExtensions">
            <summary>Extensions for <see cref="T:PayrollEngine.TimeSpanExtensions"/></summary>
        </member>
        <member name="M:PayrollEngine.TimeSpanExtensions.ToReadableString(System.TimeSpan)">
            <summary>Test if time type is scalable</summary>
            <param name="timeSpan">The time span</param>
            <remarks>see https://stackoverflow.com/questions/842057/how-do-i-convert-a-timespan-to-a-formatted-string</remarks>
            <returns>True for time type is scalable</returns>
        </member>
        <member name="T:PayrollEngine.TypeExtensions">
            <summary>Extensions for <see cref="T:System.Type"/></summary>
        </member>
        <member name="M:PayrollEngine.TypeExtensions.GetInstanceProperties(System.Type)">
            <summary>
            Get the public type properties
            </summary>
            <param name="type">The type</param>
            <returns>The public type properties</returns>
        </member>
        <member name="M:PayrollEngine.TypeExtensions.IsNumericType(System.Type)">
            <summary>
            Determines whether the type is numeric.
            See https://stackoverflow.com/a/1750024
            </summary>
            <param name="type">The type</param>
            <returns>True for numeric types</returns>
        </member>
        <member name="M:PayrollEngine.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Check if value has an nullable underlying type.
            </summary>
            <param name="type">Type to be checked</param>
            <returns>Type is nullable or not</returns>
        </member>
        <member name="M:PayrollEngine.TypeExtensions.GetDefaultValue(System.Type)">
            <summary>Gets the default value of a type</summary>
            <param name="type">The type</param>
            <returns>The default value</returns>
        </member>
        <member name="M:PayrollEngine.TypeExtensions.GetNullableType(System.Type)">
            <summary>Gets the type of nullable types</summary>
            <param name="type">The underlying type</param>
        </member>
        <member name="M:PayrollEngine.TypeExtensions.IsSerializedType(System.Type)">
            <summary>Test for serialized type</summary>
            <param name="type">The underlying type</param>
        </member>
        <member name="T:PayrollEngine.TypeTool">
            <summary>Type tools</summary>
        </member>
        <member name="M:PayrollEngine.TypeTool.GetInstanceProperties(System.Type)">
            <summary>Get the public instance properties</summary>
            <param name="type">The type</param>
            <returns>The public type properties</returns>
        </member>
        <member name="M:PayrollEngine.TypeTool.GetTypeProperties(System.Type)">
            <summary>Get the public type properties (instance and interfaces)</summary>
            <param name="type">The type</param>
            <returns>The public type properties</returns>
        </member>
        <member name="T:PayrollEngine.UriExtensions">
            <summary>Extension methods for <see cref="T:System.Uri"/> </summary>
        </member>
        <member name="M:PayrollEngine.UriExtensions.GetLastSegmentId(System.Uri)">
            <summary>Get the last uri segment as numeric value</summary>
            <param name="uri">The uri</param>
            <returns>The numeric value of the last uri segment</returns>
        </member>
        <member name="M:PayrollEngine.UriExtensions.EnsureClosedUri(System.String)">
            <summary>Ensures the URL validity</summary>
            <param name="uri">The base URI</param>
            <returns>Closed URI</returns>
        </member>
        <member name="M:PayrollEngine.UriExtensions.AddCollectionQueryString(System.String,System.String,System.Collections.IEnumerable)">
            <summary>Append the given query key and value to the URI</summary>
            <param name="uri">The base URI</param>
            <param name="name">The name of the query key</param>
            <param name="values">The collection value</param>
            <returns>The combined result</returns>
        </member>
        <member name="M:PayrollEngine.UriExtensions.AddQueryString(System.String,System.String,System.Object)">
            <summary>Append the given query key and value to the URI</summary>
            <param name="uri">The base URI</param>
            <param name="name">The name of the query key</param>
            <param name="value">The query value (enum:names, date time: UTC round trip pattern)</param>
            <returns>The combined result</returns>
        </member>
        <member name="M:PayrollEngine.UriExtensions.AddQueryString(System.String,System.String,System.Decimal)">
            <summary>Append the given query key and value to the URI</summary>
            <param name="uri">The base URI</param>
            <param name="name">The name of the query key</param>
            <param name="value">The decimal value</param>
            <returns>The combined result</returns>
        </member>
        <member name="M:PayrollEngine.UriExtensions.AddQueryString(System.String,System.String,System.DateTime)">
            <summary>Append the given query key and value to the URI</summary>
            <param name="uri">The base URI</param>
            <param name="name">The name of the query key</param>
            <param name="value">The date time value</param>
            <returns>The combined result</returns>
        </member>
        <member name="T:PayrollEngine.UserType">
            <summary>The type of the user</summary>
        </member>
        <member name="F:PayrollEngine.UserType.Regular">
            <summary>Regular user</summary>
        </member>
        <member name="F:PayrollEngine.UserType.Employee">
            <summary>User with employee self service</summary>
        </member>
        <member name="F:PayrollEngine.UserType.Supervisor">
            <summary>User who can manage all users</summary>
        </member>
        <member name="T:PayrollEngine.ValueBaseType">
            <summary>The payroll value base types (JSON compatible)</summary>
        </member>
        <member name="F:PayrollEngine.ValueBaseType.String">
            <summary>String</summary>
        </member>
        <member name="F:PayrollEngine.ValueBaseType.Number">
            <summary>Number</summary>
        </member>
        <member name="F:PayrollEngine.ValueBaseType.Boolean">
            <summary>Boolean</summary>
        </member>
        <member name="F:PayrollEngine.ValueBaseType.Object">
            <summary>Object</summary>
        </member>
        <member name="F:PayrollEngine.ValueBaseType.Array">
            <summary>Array</summary>
        </member>
        <member name="F:PayrollEngine.ValueBaseType.Null">
            <summary>No value type available</summary>
        </member>
        <member name="T:PayrollEngine.ValueConvert">
            <summary>Convert a value</summary>
        </member>
        <member name="M:PayrollEngine.ValueConvert.InvertValue(System.String,PayrollEngine.ValueType)">
            <summary>Invert numeric json value</summary>
            <param name="json">The json to convert</param>
            <param name="valueType">The value type</param>
            <returns>Inverted json value</returns>
        </member>
        <member name="M:PayrollEngine.ValueConvert.TryToJson(System.Object,System.String@)">
            <summary>Try to convert value to JSON</summary>
            <param name="value">The value</param>
            <param name="json">The value as JSON text</param>
            <returns>True for a valid JSON conversion</returns>
        </member>
        <member name="M:PayrollEngine.ValueConvert.ToJson(System.Object)">
            <summary>Converts value to JSON</summary>
            <param name="value">The value</param>
            <returns>The JSON representation of the value</returns>
        </member>
        <member name="M:PayrollEngine.ValueConvert.TryToValue(System.String,PayrollEngine.ValueType,System.Object@)">
            <summary>Try to convert JSON string to value</summary>
            <param name="json">The JSON representation</param>
            <param name="valueType">The value type</param>
            <param name="value">The value</param>
            <returns>True for a valid JSON conversion</returns>
        </member>
        <member name="M:PayrollEngine.ValueConvert.ToNumber(System.String,PayrollEngine.ValueType)">
            <summary>Convert JSON string to a number value</summary>
            <param name="json">The JSON representation</param>
            <param name="valueType">The value type</param>
            <returns>Numeric value or null</returns>
        </member>
        <member name="M:PayrollEngine.ValueConvert.ToValue(System.String,PayrollEngine.ValueType)">
            <summary>Converts JSON string to value</summary>
            <param name="json">The JSON representation</param>
            <param name="valueType">The value type</param>
            <returns>The value</returns>
        </member>
        <member name="M:PayrollEngine.ValueConvert.ToInteger(System.String)">
            <summary>Converts a JSON string to an integer value</summary>
            <param name="json">The JSON representation</param>
            <returns>The integer value</returns>
        </member>
        <member name="M:PayrollEngine.ValueConvert.ToDecimal(System.String)">
            <summary>Converts a JSON string to an decimal value</summary>
            <param name="json">The JSON representation</param>
            <returns>The decimal value</returns>
        </member>
        <member name="M:PayrollEngine.ValueConvert.ToString(System.String)">
            <summary>Converts a JSON string to a string value</summary>
            <param name="json">The JSON representation</param>
            <returns>The string value</returns>
        </member>
        <member name="M:PayrollEngine.ValueConvert.ToDateTime(System.String)">
            <summary>Converts a JSON string to a date time value</summary>
            <param name="json">The JSON representation</param>
            <returns>The date value</returns>
        </member>
        <member name="M:PayrollEngine.ValueConvert.ToBoolean(System.String)">
            <summary>Converts a JSON string to a boolean value</summary>
            <param name="json">The JSON representation</param>
            <returns>The boolean value</returns>
        </member>
        <member name="T:PayrollEngine.ValueScope">
            <summary>The scope for a payroll value</summary>
        </member>
        <member name="F:PayrollEngine.ValueScope.Local">
            <summary>Local case value available for one division</summary>
        </member>
        <member name="F:PayrollEngine.ValueScope.Global">
            <summary>Global case value available for all divisions</summary>
        </member>
        <member name="T:PayrollEngine.ValueType">
            <summary>The payroll value types for cases</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.String">
            <summary>String (base type string)</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.Boolean">
            <summary>Boolean (base type boolean)</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.Integer">
            <summary>Integer (base type numeric)</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.NumericBoolean">
            <summary>Numeric boolean, any non-zero value means true (base type numeric)</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.Decimal">
            <summary>Decimal (base type numeric)</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.DateTime">
            <summary>Date and time (base type string)</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.None">
            <summary>No value type (base type null)</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.Date">
            <summary>Date (base type string)</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.Weekday">
            <summary>Day of week (base type integer 0..6)</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.Month">
            <summary>Month (base type integer 0..11)</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.Year">
            <summary>Year (base type integer)</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.Money">
            <summary>Money (base type decimal)</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.Percent">
            <summary>Percentage (base type decimal)</summary>
        </member>
        <member name="F:PayrollEngine.ValueType.WebResource">
            <summary>Web Resource e.g. Url (base type string)</summary>
        </member>
        <member name="T:PayrollEngine.ValueTypeExtensions">
            <summary>Extensions for <see cref="T:PayrollEngine.ValueType"/></summary>
        </member>
        <member name="M:PayrollEngine.ValueTypeExtensions.GetSystemType(PayrollEngine.ValueType)">
            <summary>Get the data system type</summary>
            <param name="valueType">The value type</param>
            <returns>The data type</returns>
        </member>
        <member name="M:PayrollEngine.ValueTypeExtensions.GetBaseType(PayrollEngine.ValueType)">
            <summary>Get the base value type (JSON type)</summary>
            <param name="valueType">The value type</param>
            <returns>The value base type</returns>
            <exception cref="T:PayrollEngine.PayrollException">Unknown value type</exception>
        </member>
        <member name="M:PayrollEngine.ValueTypeExtensions.GetDefaultValue(PayrollEngine.ValueType)">
            <summary>
            Gets the default type of a value type
            </summary>
            <param name="valueType">The value type</param>
            <returns>The value</returns>
        </member>
        <member name="M:PayrollEngine.ValueTypeExtensions.IsBoolean(PayrollEngine.ValueType)">
            <summary>Test if value type is a bool</summary>
            <param name="valueType">The value type</param>
            <returns>True for boolean value types</returns>
        </member>
        <member name="M:PayrollEngine.ValueTypeExtensions.IsString(PayrollEngine.ValueType)">
            <summary>Test if value type is a string</summary>
            <param name="valueType">The value type</param>
            <returns>True for string value types</returns>
        </member>
        <member name="M:PayrollEngine.ValueTypeExtensions.IsDateTime(PayrollEngine.ValueType)">
            <summary>Test if value type is a date time</summary>
            <param name="valueType">The value type</param>
            <returns>True for date time value types</returns>
        </member>
        <member name="M:PayrollEngine.ValueTypeExtensions.IsNumber(PayrollEngine.ValueType)">
            <summary>Test if value type is a number</summary>
            <param name="valueType">The value type</param>
            <returns>True for number value types</returns>
        </member>
        <member name="M:PayrollEngine.ValueTypeExtensions.IsInteger(PayrollEngine.ValueType)">
            <summary>Test if value type is a integer</summary>
            <param name="valueType">The value type</param>
            <returns>True for integer value types</returns>
        </member>
        <member name="M:PayrollEngine.ValueTypeExtensions.IsDecimal(PayrollEngine.ValueType)">
            <summary>Test if value type is a decimal number</summary>
            <param name="valueType">The value type</param>
            <returns>True for decimal number value types</returns>
        </member>
        <member name="M:PayrollEngine.ValueTypeExtensions.IsTypeOf(PayrollEngine.ValueType,PayrollEngine.ValueBaseType)">
            <summary>
            Test for the base type
            </summary>
            <param name="valueType">The value type</param>
            <param name="baseType">The value base type</param>
            <returns>True if the value type matches base type is</returns>
        </member>
        <member name="T:PayrollEngine.WebhookAction">
            <summary>The Webhook message type</summary>
        </member>
        <member name="F:PayrollEngine.WebhookAction.None">
            <summary>No message</summary>
        </member>
        <member name="F:PayrollEngine.WebhookAction.CaseFunctionRequest">
            <summary>Case function request</summary>
        </member>
        <member name="F:PayrollEngine.WebhookAction.CaseChangeAdded">
            <summary>Case change added</summary>
        </member>
        <member name="F:PayrollEngine.WebhookAction.PayrunFunctionRequest">
            <summary>Payrun function request</summary>
        </member>
        <member name="F:PayrollEngine.WebhookAction.PayrunJobProcess">
            <summary>Process payrun job</summary>
        </member>
        <member name="F:PayrollEngine.WebhookAction.PayrunJobFinish">
            <summary>Payrun job finished</summary>
        </member>
        <member name="F:PayrollEngine.WebhookAction.ReportFunctionRequest">
            <summary>Report function request</summary>
        </member>
        <member name="F:PayrollEngine.WebhookAction.TaskChange">
            <summary>Task change</summary>
        </member>
    </members>
</doc>
